{"version":3,"sources":["webpack:///./node_modules/numeral/numeral.js","webpack:///./node_modules/path-browserify/index.js"],"names":["global","factory","this","numeral","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","args","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","allSuffixes","concat","filter","item","unformatRegex","bytes","suffix","bytesMultiplier","symbols","before","after","exponential","toExponential","num","hours","floor","minutes","seconds","timeArray","normalizeArray","allowAboveRoot","up","last","unshift","basename","path","end","matchedSlash","charCodeAt","xs","f","res","push","exports","resolve","resolvedPath","resolvedAbsolute","process","cwd","charAt","p","normalize","isAbsolute","trailingSlash","paths","index","relative","from","to","arr","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","code","hasRoot","ext","extname","startDot","startPart","preDotState","str"],"mappings":"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","file":"js/chunk-vendors~b58f7129.520f3cd3.js","sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n"],"sourceRoot":""}