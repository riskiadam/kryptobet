'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterPaths = exports.splitPaths = exports.buildSitemap = exports.parseRoutes = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _routesParser = require('./routes-parser');

Object.defineProperty(exports, 'parseRoutes', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_routesParser).default;
  }
});

var _sitemapBuilder = require('./sitemap-builder');

Object.defineProperty(exports, 'buildSitemap', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sitemapBuilder).default;
  }
});

var _pathSplitter = require('./path-splitter');

Object.defineProperty(exports, 'splitPaths', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_pathSplitter).default;
  }
});

var _pathsFilter = require('./paths-filter');

Object.defineProperty(exports, 'filterPaths', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_pathsFilter).default;
  }
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _sitemap = require('sitemap');

var _sitemap2 = _interopRequireDefault(_sitemap);

var _routesParser2 = _interopRequireDefault(_routesParser);

var _sitemapBuilder2 = _interopRequireDefault(_sitemapBuilder);

var _pathSplitter2 = _interopRequireDefault(_pathSplitter);

var _pathsFilter2 = _interopRequireDefault(_pathsFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VueRouterSitemap = function () {
  function VueRouterSitemap(router) {
    _classCallCheck(this, VueRouterSitemap);

    if (!router) {
      throw new Error('Need pass router in module');
    }

    this.paths = (0, _routesParser2.default)(router.options.routes);

    return this;
  }

  _createClass(VueRouterSitemap, [{
    key: 'filterPaths',
    value: function filterPaths(filterConfig) {
      this.paths = (0, _pathsFilter2.default)(this.paths, filterConfig.rules, filterConfig.isValid || false);

      return this;
    }
  }, {
    key: 'applyParams',
    value: function (_applyParams) {
      function applyParams(_x) {
        return _applyParams.apply(this, arguments);
      }

      applyParams.toString = function () {
        return _applyParams.toString();
      };

      return applyParams;
    }(function (paramsConfig) {
      this.paths = applyParams(this.paths, paramsConfig);
      return this;
    })
  }, {
    key: 'build',
    value: function build() {
      var hostname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http://localhost';

      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$limitCountPaths = _ref.limitCountPaths,
          limitCountPaths = _ref$limitCountPaths === undefined ? 49999 : _ref$limitCountPaths;

      this.hostname = hostname;
      this.splitted = (0, _pathSplitter2.default)(this.paths, limitCountPaths);
      this.sitemaps = this.splitted.map(function (paths) {
        return (0, _sitemapBuilder2.default)(hostname, paths);
      });

      return this;
    }
  }, {
    key: 'save',
    value: function save(dist) {
      var _this = this;

      var publicPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';

      var sitemapPaths = [];

      this.sitemaps.forEach(function (sitemap, index) {
        var savePath = dist.replace('.xml', '-' + index + '.xml');
        _fs2.default.writeFileSync(savePath, sitemap.toString());
        sitemapPaths.push(_this.hostname + publicPath + _path2.default.basename(savePath));
      });

      var sitemapIndex = _sitemap2.default.buildSitemapIndex({
        urls: sitemapPaths,
        hostname: this.hostname
      });
      _fs2.default.writeFileSync(dist, sitemapIndex);

      return this;
    }
  }]);

  return VueRouterSitemap;
}();

exports.default = VueRouterSitemap;