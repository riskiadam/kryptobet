{"remainingRequest":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\kikis\\Documents\\kryptobet\\src\\views\\Isobet\\Desktop\\Home\\Home.vue?vue&type=template&id=37ed2e13&","dependencies":[{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\src\\views\\Isobet\\Desktop\\Home\\Home.vue","mtime":1644570881570},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644485493295},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1644485502309},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644485493295},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\vue-loader\\lib\\index.js","mtime":1644485499914}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxCYXNlTGF5b3V0PgogIDxkaXYgY2xhc3M9ImhvbWUiPgogICAgPENhcm91c2VsIC8+CiAgICA8Yi1tb2RhbAogICAgICBpZD0iZ2FtZWxpbmtIb21lIgogICAgICBoaWRlLWZvb3RlcgogICAgICBjbGFzcz0iY2VudGVyIgogICAgICByZWY9ImdhbWVsaW5rSG9tZSIKICAgICAgY2VudGVyZWQKICAgICAgc2l6ZT0ic20iCiAgICAgIHNjcm9sbGFibGUKICAgID4KICAgICAgPHRlbXBsYXRlICNtb2RhbC1oZWFkZXI9InsgY2xvc2UgfSIgY2xhc3M9ImNlbnRlciI+CiAgICAgICAgPGg0CiAgICAgICAgICBjbGFzcz0iZ2FtZWxpbmstdGV4dCBtb2RhbC10aXRsZS0yMCBjZW50ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciIKICAgICAgICA+CiAgICAgICAgICBQT1BVUCBMSU5LIEdBTUVTCiAgICAgICAgPC9oND4KICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ib3V0bGluZS1kYW5nZXIiIEBjbGljaz0iY2xvc2UoKSI+CiAgICAgICAgICA8c3BhbiBjbGFzcz0iY2VudGVyIj4gWCA8L3NwYW4+CiAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgPC90ZW1wbGF0ZT4KICAgICAgPHVsIGNsYXNzPSJyb3ctcG0tMCBjZW50ZXIiPgogICAgICAgIDxwIGNsYXNzPSJnYW1lbGluay1wYXJhZ3JhcGgiPgogICAgICAgICAgSWYgdGhlIGdhbWUgZG9lc24ndCBvcGVuLCA8YnIgLz4KICAgICAgICAgIHlvdSBjYW4gY2xpY2sgdGhlIGJ1dHRvbiBiZWxvdy4KICAgICAgICA8L3A+CiAgICAgICAgPGEgdi1iaW5kOmhyZWY9InRoaXMubGlua0dhbWVzIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICA8Yi1idG4gY2xhc3M9ImdhbWVsaW5rLWJ1dHRvbiI+IE9QRU4gR0FNRSA8L2ItYnRuPgogICAgICAgIDwvYT4KICAgICAgPC91bD4KICAgIDwvYi1tb2RhbD4KICAgIDxkaXYgY2xhc3M9IkRlc2t0b3BIb21lIj4KICAgICAgPCEtLSBKYWNrcG90IC0tPgogICAgICA8ZGl2IGNsYXNzPSJwb3NpdGlvbi1yZWxhdGl2ZSBjZW50ZXIiIHN0eWxlPSJtYXJnaW4tdG9wOiAyJSI+CiAgICAgICAgPGltZwogICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgIHdpZHRoPSIxMjAwIgogICAgICAgICAgaGVpZ2h0PSIxNDUiCiAgICAgICAgICBzdHlsZT0id2lkdGg6IDkwJTsgYm9yZGVyLXJhZGl1czogMjBweCIKICAgICAgICAgIHNyYz0iaW1hZ2VzL2FuaW1hdGlvbi1qYWNrcG90LmdpZiIKICAgICAgICAvPgogICAgICAgIDxkaXYgY2xhc3M9InBvc2l0aW9uLWFic29sdXRlIGFuaW1hdGlvbi10ZXh0Ij4KICAgICAgICAgIDxudW1iZXIKICAgICAgICAgICAgcmVmPSJudW1iZXIxIgogICAgICAgICAgICA6ZnJvbT0iNjUxNzMxMjM5MCIKICAgICAgICAgICAgOnRvPSI5MjI3MzEyODkwIgogICAgICAgICAgICA6Zm9ybWF0PSJ0aGVGb3JtYXQyIgogICAgICAgICAgICA6ZHVyYXRpb249IjUwMDAwMDAwIgogICAgICAgICAgICA6ZGVsYXk9IjIiCiAgICAgICAgICAgIGVhc2luZz0iUG93ZXIxLmVhc2VPdXQiCiAgICAgICAgICAgIGNsYXNzPSJhbmltYXRpb24tdGV4dC12YWx1ZSIKICAgICAgICAgIC8+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8IS0tIE1lbnUgU2VydmljZSAtLT4KICAgICAgPGRpdgogICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwOyBtYXJnaW4tdG9wOiAwcHg7IHBhZGRpbmc6IDIwcHggNjBweCIKICAgICAgPgogICAgICAgIDxiLXJvdyBjbGFzcz0iY2VudGVyIiBhbGlnbi12PSJjZW50ZXIiPgogICAgICAgICAgPGItY29sIGNvbHM9IjEyIiBtZD0iNCIgc3R5bGU9InBhZGRpbmc6IDVweCI+CiAgICAgICAgICAgIDxiLWNhcmQgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICM0YTIxNTYiPgogICAgICAgICAgICAgIDxoNAogICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7CiAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMjBweDsKICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHdoaXRlOwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIFByb2R1Y3QKICAgICAgICAgICAgICA8L2g0PgogICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndpZHRoOiAxMDAlOyBtYXJnaW46IDBweCBhdXRvOyBoZWlnaHQ6IDM3MHB4Ij4KICAgICAgICAgICAgICAgIDwhLS0gVXNpbmcgdGhlIHNsaWRlciBjb21wb25lbnQgLS0+CiAgICAgICAgICAgICAgICA8c2xpZGVyIHJlZj0ic2xpZGVyMiIgOm9wdGlvbnM9Im9wdGlvbnMyIj4KICAgICAgICAgICAgICAgICAgPHNsaWRlcml0ZW0KICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IG1hcmdpbi1sZWZ0OiAxMHB4OyBtYXJnaW4tcmlnaHQ6IDEwcHgiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8Yi1jYXJkCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjUwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAlOwogICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAlOwogICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzRhMjE1NjsKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAwcHggc29saWQ7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGItcm93IHN0eWxlPSJwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBzdHlsZT0iY29sb3I6ICNkZmIwNzQ7IGZvbnQtc2l6ZTogMjBweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgU1BPUlRTCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgPGItcm93IHN0eWxlPSJwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsZWZ0IHRleHQtbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHdoaXRlOyBmb250LXNpemU6IDE2cHgiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICBXZWxsLWtub3duIEFzaWFuICYgRXVyb3BlYW4gdmlldyBTcG9ydHMgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgQmV0dGluZyBhdmFpbGFibGUgaGVyZQogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlOyBtYXJnaW4tdG9wOiAxMCUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDUgc3R5bGU9ImNvbG9yOiAjZGZiMDc0OyBmb250LXNpemU6IDIwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgIEUtR0FNRVMKICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxlZnQgdGV4dC1sZWZ0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGU7IGZvbnQtc2l6ZTogMTZweCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIFdlIGhhdmUgQXNpYW4gdGhlbWVkIGdhbWVzIGFzIHdlbGwgYXMgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgRXVyb3BlYW4gdGhlbWVkIGdhbWVzIHRvIGNhdGVyIHRoZSA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkIG9mIG91ciBPcGVyYXRvcnMgYWNyb3NzIHRoZSBnbG9iZQogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPgoKICAgICAgICAgICAgICAgICAgPHNsaWRlcml0ZW0KICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IG1hcmdpbi1sZWZ0OiAxMHB4OyBtYXJnaW4tcmlnaHQ6IDEwcHgiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8Yi1jYXJkCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjUwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAlOwogICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAlOwogICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzRhMjE1NjsKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAwcHggc29saWQ7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGItcm93IHN0eWxlPSJwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBzdHlsZT0iY29sb3I6ICNkZmIwNzQ7IGZvbnQtc2l6ZTogMjBweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgTElWRSBDQVNJTk8KICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxlZnQgdGV4dC1sZWZ0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGU7IGZvbnQtc2l6ZTogMTZweCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIFVuZm9yZ2V0dGFibGUgZXhwZXJpZW5jZSB3aXRoIHRoZSBiZXN0IGxpdmUgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzaW5vIGdhbWVzIG9ubGluZQogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlOyBtYXJnaW4tdG9wOiAxMCUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDUgc3R5bGU9ImNvbG9yOiAjZGZiMDc0OyBmb250LXNpemU6IDIwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgIExPVFRFUlkKICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImxlZnQgdGV4dC1sZWZ0IgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjogd2hpdGU7IGZvbnQtc2l6ZTogMTZweCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIEJldCBub3cgYW5kIGVuam95IGJpZyB3aW5zIHdpdGggb3VyIGxpdmUgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgbG90dGVyeSBnYW1lcyBzdWNoIGFzIElzaW40RCBhbmQgS2Vuby4gPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgRmFzdCBwYXlvdXQgYW5kIGhpZ2h0IHdpbm5pbmcgb2RkcyA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICBndWFyYW50ZWVkIQogICAgICAgICAgICAgICAgICAgICAgICA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPgoKICAgICAgICAgICAgICAgICAgPHNsaWRlcml0ZW0KICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDEwMCU7IG1hcmdpbi1sZWZ0OiAxMHB4OyBtYXJnaW4tcmlnaHQ6IDEwcHgiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8Yi1jYXJkCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjUwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAlOwogICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAlOwogICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzRhMjE1NjsKICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAwcHggc29saWQ7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPGItcm93IHN0eWxlPSJwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBzdHlsZT0iY29sb3I6ICNkZmIwNzQ7IGZvbnQtc2l6ZTogMjBweCI+UE9LRVI8L2g1PgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDYKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibGVmdCB0ZXh0LWxlZnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZTsgZm9udC1zaXplOiAxNnB4IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgUG9rZXIgZ2FtZXMgLSBBdmFsYWlibGUgTm93ISBFbmpveSBhbGwgb2YgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgR2FtZXMgdG9kYXkhCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgoKICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCU7IG1hcmdpbi10b3A6IDEwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBzdHlsZT0iY29sb3I6ICNkZmIwNzQ7IGZvbnQtc2l6ZTogMjBweCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgUkFDSU5HCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgPGItcm93IHN0eWxlPSJwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsZWZ0IHRleHQtbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6IHdoaXRlOyBmb250LXNpemU6IDE2cHgiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICBIT1JTRSBSQUNJTkcgLSBBdmFpbGFibGUgTm93ISBFbmpvdSBhbGwgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgbWF0Y2ggcmFjZXMgdG9kYXkhCiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgICAgICAgICAgICA8L3NsaWRlcml0ZW0+CiAgICAgICAgICAgICAgICA8L3NsaWRlcj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9iLWNhcmQ+CiAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgPGItY29sIGNvbHM9IjEyIiBtZD0iNCIgc3R5bGU9InBhZGRpbmc6IDVweCI+CiAgICAgICAgICAgIDxiLWNhcmQgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICM0YTIxNTYiPgogICAgICAgICAgICAgIDxoNAogICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7CiAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMjBweDsKICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHdoaXRlOwogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIE1lbWJlciBTZXJ2aWNlCiAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3aWR0aDogMTAwJTsgbWFyZ2luOiAwcHggYXV0bzsgaGVpZ2h0OiAzNzBweCI+CiAgICAgICAgICAgICAgICA8IS0tIFVzaW5nIHRoZSBzbGlkZXIgY29tcG9uZW50IC0tPgogICAgICAgICAgICAgICAgPHNsaWRlciByZWY9InNsaWRlcjMiIDpvcHRpb25zPSJvcHRpb25zMiI+CiAgICAgICAgICAgICAgICAgIDxzbGlkZXJpdGVtCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDsKICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDsKICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDsKICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogbGVmdDsKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMHB4IDBweDsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1MHB4OwogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdwogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogMHB4IDEwJTsgbWFyZ2luOiAwcHg7IHdpZHRoOiAxMDAlIgogICAgICAgICAgICAgICAgICAgICAgICBhbGlnbi12PSJjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiIGNvbHM9IjciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IHN0eWxlPSJjb2xvcjogI2RmYjA3NDsgZm9udC1zaXplOiAyMHB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgREVQT1NJVAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsZWZ0IHRleHQtbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZTsgZm9udC1zaXplOiAxNnB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdmVyYWdlIFRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiIGNvbHM9IjUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZD0iNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZsaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6dmFsdWU9ImNvdW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZD0iNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IHN0eWxlPSJmb250LXNpemU6IDE1cHg7IGNvbG9yOiB3aGl0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIiBjb2xzPSIxMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGItcHJvZ3Jlc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0iNDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PSJ3YXJuaW5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iYm9yZGVyLXJhZGl1cz0zMHB4OyIKICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9iLXByb2dyZXNzPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweCAxMCU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICBhbGlnbi12PSJjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiIGNvbHM9IjciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IHN0eWxlPSJjb2xvcjogI2RmYjA3NDsgZm9udC1zaXplOiAyMHB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV0lUSERSQVdBTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJsZWZ0IHRleHQtbGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOiB3aGl0ZTsgZm9udC1zaXplOiAxNnB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdmVyYWdlIFRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiIGNvbHM9IjUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZD0iNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZsaXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWJpbmQ6dmFsdWU9ImNvdW50ZXIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMHB4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9IjYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBzdHlsZT0iZm9udC1zaXplOiAxNXB4OyBjb2xvcjogd2hpdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sIHN0eWxlPSJwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSIgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXByb2dyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dmFsdWU9IjgwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD0id2FybmluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtdC0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImJvcmRlci1yYWRpdXM9MzBweDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYi1wcm9ncmVzcz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweCAxMCU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICBhbGlnbi12PSJjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiIGNvbHM9IjciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IHN0eWxlPSJjb2xvcjogI2RmYjA3NDsgZm9udC1zaXplOiAyMHB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUEVOR0dVTkEgT05MSU5FCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGItcm93IHN0eWxlPSJwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjY1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iNjUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBib3JkZXItcmFkaXVzOiAxMHB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL2ljb24vb25saW5ldXNlcl9pY29uLnBuZycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIiBjb2xzPSI1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduLXY9ImNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9IjYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZD0iNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IHN0eWxlPSJmb250LXNpemU6IDEuNXJlbTsgY29sb3I6ICNkZmIwNzQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEyMDY2NgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE1cHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogLTUycHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGVyc29uIC8gUGVyIGhvdXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPgoKICAgICAgICAgICAgICAgICAgPCEtLSA8c2xpZGVyaXRlbSBzdHlsZT0id2lkdGg6MTAwJTsgbWFyZ2luLWxlZnQ6MTBweDsgbWFyZ2luLXJpZ2h0OjEwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzowJTsgbWFyZ2luOjAlOyBoZWlnaHQ6MjUwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sIGNsYXNzPSJ0ZXh0LWxlZnQgbGVmdCIgc3R5bGU9InBhZGRpbmc6MCU7IG1hcmdpbjowJTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0idGV4dC1sZWZ0IGxlZnQiIHN0eWxlPSJwYWRkaW5nOjAlOyBtYXJnaW46MCU7IGhlaWdodDo1MHB4OyIgYWxpZ24tdj0iY2VudGVyIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGxvYWRpbmc9ImxhenkiICBzdHlsZT0id2lkdGg6MTAwJTsgYm9yZGVyLXJhZGl1czoxMHB4OyB3aWR0aDo1MHB4OyBoZWlnaHQ6NTBweDsiIHNyYz0iaHR0cHM6Ly9pay5pbWFnZWtpdC5pby9zcGxhdDQzMjFjZG4vSXNvYmV0L2ljb24vdGVzdGluZy1zZXJ2aWNlLTNfQVNVc2RRYnVyLnBuZyIgd2lkdGg9IjUwIiBoZWlnaHQ9IjUwIi8+ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgc3R5bGU9ImNvbG9yOiNERkIwNzQ7IGZvbnQtc2l6ZToyMHB4OyI+TElWRSBIRUxQPC9oNT4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4gICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4gICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPiAtLT4KICAgICAgICAgICAgICAgIDwvc2xpZGVyPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2ItY2FyZD4KICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSI0IiBzdHlsZT0icGFkZGluZzogNXB4Ij4KICAgICAgICAgICAgPGItY2FyZCBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogIzRhMjE1NiI+CiAgICAgICAgICAgICAgPGg0CiAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAyMHB4OwogICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgd2hpdGU7CiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgQmFuawogICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id2lkdGg6IDEwMCU7IG1hcmdpbjogMHB4IGF1dG87IGhlaWdodDogMzcwcHgiPgogICAgICAgICAgICAgICAgPCEtLSBVc2luZyB0aGUgc2xpZGVyIGNvbXBvbmVudCAtLT4KICAgICAgICAgICAgICAgIDxzbGlkZXIgcmVmPSJzbGlkZXIyIiA6b3B0aW9ucz0ib3B0aW9uczIiPgogICAgICAgICAgICAgICAgICA8c2xpZGVyaXRlbQogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgbWFyZ2luLWxlZnQ6IDEwcHg7IG1hcmdpbi1yaWdodDogMTBweCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxiLXJvdwogICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHggMHB4OwogICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDBweDsKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjUwcHg7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICBhbGlnbi12PSJzdGFydCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDBweCAxMCU7IG1hcmdpbjogMHB4OyB3aWR0aDogMTAwJSIKICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0ic3RhcnQiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiIGNvbHM9IjciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IHN0eWxlPSJjb2xvcjogI2RmYjA3NDsgZm9udC1zaXplOiAyMHB4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU1VQUE9SVEVEIEJBTksKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlOyB3aWR0aDogMTAwJSIKICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0ic3RhcnQiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogNSU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiA1JTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvaWNvbi9idXR0b24tb25saW5lLnBuZycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSI5NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIzNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA2MCUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9InJlcXVpcmUoJ0AvYXNzZXRzL2ltYWdlcy9sb2dvL0JDQS5wbmcnKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cgc3R5bGU9InBhZGRpbmc6IDUlOyBtYXJnaW46IDAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjE5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogNSU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnNyYz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL2ljb24vYnV0dG9uLW9ubGluZS5wbmcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMzYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogNjAlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSJyZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvbG9nby9CTkkucG5nJykiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogNSU7IG1hcmdpbjogMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMTkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiA1JTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvaWNvbi9idXR0b24tb25saW5lLnBuZycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSI5NiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIzNiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA2MCUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9InJlcXVpcmUoJ0AvYXNzZXRzL2ltYWdlcy9sb2dvL0JSSS5wbmcnKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cgc3R5bGU9InBhZGRpbmc6IDUlOyBtYXJnaW46IDAlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjE5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjE5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogNSU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnNyYz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL2ljb24vYnV0dG9uLW9ubGluZS5wbmcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iOTYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iMzYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogNjAlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvbG9nby9NQU5ESVJJLnBuZycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPgogICAgICAgICAgICAgICAgPC9zbGlkZXI+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1jYXJkPgogICAgICAgICAgPC9iLWNvbD4KICAgICAgICA8L2Itcm93PgogICAgICA8L2Rpdj4KICAgICAgPCEtLSBNZW51IFRhbWJhaGFuIC0tPgogICAgICA8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwIj4KICAgICAgICA8Yi1yb3cKICAgICAgICAgIGNsYXNzPSJhbGlnbi1jZW50ZXIgY2VudGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIiCiAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDA7CiAgICAgICAgICAgIHBhZGRpbmctdG9wOiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMjBweDsKICAgICAgICAgICIKICAgICAgICA+CiAgICAgICAgICA8Yi1idXR0b24gY2xhc3M9InRleHQtbWVudS1ib3R0b20iIDp0bz0ieyBuYW1lOiAnUHJvbW90aW9uJyB9Ij4KICAgICAgICAgICAgUHJvbW9zaQogICAgICAgICAgPC9iLWJ1dHRvbj4KICAgICAgICAgIDxiLWJ1dHRvbiBjbGFzcz0idGV4dC1tZW51LWJvdHRvbSIgOnRvPSJ7IG5hbWU6ICdCbG9nJyB9Ij4KICAgICAgICAgICAgQmVyaXRhCiAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgPGItYnV0dG9uIGNsYXNzPSJ0ZXh0LW1lbnUtYm90dG9tIiA6dG89InsgbmFtZTogJ1JlZmZlcmFsJyB9Ij4KICAgICAgICAgICAgUmVmZXJyYWwKICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICA8Yi1idXR0b24gY2xhc3M9InRleHQtbWVudS1ib3R0b20iIDp0bz0ieyBuYW1lOiAnSGVscCcgfSI+CiAgICAgICAgICAgIEJhbnR1YW4KICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgY2xhc3M9InRleHQtbWVudS1ib3R0b20iCiAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICBocmVmPSJodHRwOi8vMTY1LjIyLjI1My4xNjIva2VsdWFyYW4tdG9nZWwuYW1wIgogICAgICAgICAgPgogICAgICAgICAgICBMaXZlIFNjb3JlCiAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgIDwvYi1yb3c+CiAgICAgIDwvZGl2PgogICAgICA8IS0tIE1lbnUgJiBXaW5uZXIgTGlzdCAtLT4KICAgICAgPGRpdiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMyUiPgogICAgICAgIDxiLXJvdyBzdHlsZT0icGFkZGluZzogMCU7IG1hcmdpbjogMCUiPgogICAgICAgICAgPGItY29sCiAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICBtZD0iMSIKICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6IGJsYWNrOyBwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSIKICAgICAgICAgID4KICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgY29scz0iMTIiCiAgICAgICAgICAgIG1kPSIyIgogICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7CiAgICAgICAgICAgICAgcGFkZGluZzogMCU7CiAgICAgICAgICAgICAgbWFyZ2luOiAwJTsKICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDElOwogICAgICAgICAgICAiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxiLXJvdwogICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgIHBhZGRpbmc6IDIlOwogICAgICAgICAgICAgICAgbWFyZ2luOiAwJTsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgjMTAxMDEwLCAjMTYxNjE2LCAjMWQxZDFkKTsKICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSIyIiBjbGFzcz0iY2VudGVyIj4KICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjI1IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjI1IgogICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDI1cHg7IGhlaWdodDogMjVweCIKICAgICAgICAgICAgICAgICAgOnNyYz0icmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL2ljb24vcGlhbGEucG5nJykiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEyIiBtZD0iMTAiIGNsYXNzPSJjZW50ZXIiPgogICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiBib2xkOyBjb2xvcjogd2hpdGUiPgogICAgICAgICAgICAgICAgICBXSU5ORVIgUExBWUVSCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgPGItcm93CiAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgcGFkZGluZzogMCUgOCUgMCUgOCU7CiAgICAgICAgICAgICAgICBtYXJnaW46IDAlOwogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KCMxMDEwMTAsICMxNjE2MTYsICMxZDFkMWQpOwogICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDBweDsKICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3aWR0aDogMTAwJTsgbWFyZ2luOiAwcHg7IGhlaWdodDogMzAwcHgiPgogICAgICAgICAgICAgICAgPHNsaWRlcgogICAgICAgICAgICAgICAgICByZWY9InNsaWRlciIKICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9Im9wdGlvbnMiCiAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDBweDsKICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7CiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDBweDsKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8c2xpZGVyaXRlbQogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMCU7IG1hcmdpbjogMCU7IGhlaWdodDogNTBweCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSIKICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvaWNvbi9wcm9maWxlLXVzZXIucG5nJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSI5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUnUqKioqMDQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgc3R5bGU9ImZvbnQtc2l6ZTogMTBweDsgY29sb3I6ICNkYjc3MDIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRFIgMjAwLjA2Myw2NQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPgogICAgICAgICAgICAgICAgICA8c2xpZGVyaXRlbQogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMCU7IG1hcmdpbjogMCU7IGhlaWdodDogNTBweCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSIKICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvaWNvbi9wcm9maWxlLXVzZXIucG5nJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSI5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGEqKioqMTMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgc3R5bGU9ImZvbnQtc2l6ZTogMTBweDsgY29sb3I6ICNkYjc3MDIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRFIgMjAwLjIzNCwyNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPgogICAgICAgICAgICAgICAgICA8c2xpZGVyaXRlbQogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMCU7IG1hcmdpbjogMCU7IGhlaWdodDogNTBweCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSIKICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvaWNvbi9wcm9maWxlLXVzZXIucG5nJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSI5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWXUqKioqMjEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgc3R5bGU9ImZvbnQtc2l6ZTogMTBweDsgY29sb3I6ICNkYjc3MDIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRFIgMTAwLjMwNCwyNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPgogICAgICAgICAgICAgICAgICA8c2xpZGVyaXRlbQogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMCU7IG1hcmdpbjogMCU7IGhlaWdodDogNTBweCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSIKICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvaWNvbi9wcm9maWxlLXVzZXIucG5nJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSI5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2kqKioqMTkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgc3R5bGU9ImZvbnQtc2l6ZTogMTBweDsgY29sb3I6ICNkYjc3MDIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRFIgNTAwLjMyMywwNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPgogICAgICAgICAgICAgICAgICA8c2xpZGVyaXRlbQogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMCU7IG1hcmdpbjogMCU7IGhlaWdodDogNTBweCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSIKICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvaWNvbi9wcm9maWxlLXVzZXIucG5nJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSI5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgS2UqKioqMDkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgc3R5bGU9ImZvbnQtc2l6ZTogMTBweDsgY29sb3I6ICNkYjc3MDIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRFIgMjAwLjE2Myw2NQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPgogICAgICAgICAgICAgICAgICA8c2xpZGVyaXRlbQogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgcGFkZGluZzogMCU7IG1hcmdpbjogMCU7IGhlaWdodDogNTBweCIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwJTsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAxMDAlOyBwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSIKICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tdj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMzBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvaWNvbi9wcm9maWxlLXVzZXIucG5nJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiIG1kPSI5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTBweDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSnUqKioqNzcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgc3R5bGU9ImZvbnQtc2l6ZTogMTBweDsgY29sb3I6ICNkYjc3MDIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRFIgMTAwLjEyMywxNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9zbGlkZXJpdGVtPgogICAgICAgICAgICAgICAgPC9zbGlkZXI+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgPGItY29sIGNvbHM9IjEyIiBtZD0iOCIgc3R5bGU9InBhZGRpbmc6IDAlOyBtYXJnaW46IDAlIj4KICAgICAgICAgICAgPCEtLSBNZW51IEdhbWVzIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJob21lLWJhbm5lci1jb250YWluZXIiPgogICAgICAgICAgICAgIDxiLXJvdz4KICAgICAgICAgICAgICAgIDxiLWNvbCBjbGFzcz0iZ2FtZXMtdHlwZSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayA6dG89InsgcGF0aDogJy9nYW1lcy9TQicgfSI+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxMjAiCiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjEyMCIKICAgICAgICAgICAgICAgICAgICAgIDpzcmM9IgogICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvYnV0dG9uL2hvbWUvZ2FtZXMtaG9tZS0zLnBuZycpCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICBhbHQ9InNwb3J0c2Jvb2siCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICA8Yi1jb2wgY2xhc3M9ImdhbWVzLXR5cGUganVzdGlmeS1jb250ZW50LWNlbnRlciBjZW50ZXIiPgogICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgOnRvPSJ7IHBhdGg6ICcvZ2FtZXMvTEMnIH0iPgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTIwIgogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMjAiCiAgICAgICAgICAgICAgICAgICAgICA6c3JjPSIKICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL2J1dHRvbi9ob21lL2dhbWVzLWhvbWUtMi5wbmcnKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgYWx0PSJzcG9ydHNib29rIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgPGItY29sIGNsYXNzPSJnYW1lcy10eXBlIGp1c3RpZnktY29udGVudC1jZW50ZXIgY2VudGVyIj4KICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIDp0bz0ieyBwYXRoOiAnL2dhbWVzL1AnIH0iPgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTIwIgogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMjAiCiAgICAgICAgICAgICAgICAgICAgICA6c3JjPSIKICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL2J1dHRvbi9ob21lL2dhbWVzLWhvbWUtNC5wbmcnKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgYWx0PSJzcG9ydHNib29rIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgPGItY29sIGNsYXNzPSJnYW1lcy10eXBlIGp1c3RpZnktY29udGVudC1jZW50ZXIgY2VudGVyIj4KICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIDp0bz0ieyBwYXRoOiAnL2dhbWVzL1MnIH0iPgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTIwIgogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxMjAiCiAgICAgICAgICAgICAgICAgICAgICA6c3JjPSIKICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL2J1dHRvbi9ob21lL2dhbWVzLWhvbWUtMS5wbmcnKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgYWx0PSJzcG9ydHNib29rIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIE1lbnUgUHJvdmlkZXIgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhvbWUtYmFubmVyLWNvbnRhaW5lci0yIj4KICAgICAgICAgICAgICA8Yi1yb3c+CiAgICAgICAgICAgICAgICA8Yi1jb2wgY2xhc3M9ImdhbWVzLXR5cGUganVzdGlmeS1jb250ZW50LWNlbnRlciBjZW50ZXIiPgogICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgOnRvPSJ7IHBhdGg6ICcvZ2FtZXMvUycgfSI+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxNDIiCiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjUwIgogICAgICAgICAgICAgICAgICAgICAgOnNyYz0iCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmUoJ0AvYXNzZXRzL2ltYWdlcy9idXR0b24vaG9tZS9nYW1lcy1sb2dvLTEucG5nJykKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgIDxiLWNvbCBjbGFzcz0iZ2FtZXMtdHlwZSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayA6dG89InsgcGF0aDogJy9nYW1lcy9TJyB9Ij4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCIKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iNTAiCiAgICAgICAgICAgICAgICAgICAgICA6c3JjPSIKICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL2J1dHRvbi9ob21lL2dhbWVzLWxvZ28tMi5wbmcnKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgPGItY29sIGNsYXNzPSJnYW1lcy10eXBlIGp1c3RpZnktY29udGVudC1jZW50ZXIgY2VudGVyIj4KICAgICAgICAgICAgICAgICAgPHJvdXRlci1saW5rIDp0bz0ieyBwYXRoOiAnL2dhbWVzL1MnIH0iPgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMTAwIgogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSI1MCIKICAgICAgICAgICAgICAgICAgICAgIDpzcmM9IgogICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvYnV0dG9uL2hvbWUvZ2FtZXMtbG9nby0zLnBuZycpCiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC9yb3V0ZXItbGluaz4KICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICA8Yi1jb2wgY2xhc3M9ImdhbWVzLXR5cGUganVzdGlmeS1jb250ZW50LWNlbnRlciBjZW50ZXIiPgogICAgICAgICAgICAgICAgICA8cm91dGVyLWxpbmsgOnRvPSJ7IHBhdGg6ICcvZ2FtZXMvUycgfSI+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgbG9hZGluZz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxMDAiCiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9IjUwIgogICAgICAgICAgICAgICAgICAgICAgOnNyYz0iCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmUoJ0AvYXNzZXRzL2ltYWdlcy9idXR0b24vaG9tZS9nYW1lcy1sb2dvLTQucG5nJykKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgIDxiLWNvbCBjbGFzcz0iZ2FtZXMtdHlwZSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDxyb3V0ZXItbGluayA6dG89InsgcGF0aDogJy9nYW1lcy9TJyB9Ij4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCIKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iNTAiCiAgICAgICAgICAgICAgICAgICAgICA6c3JjPSIKICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL2J1dHRvbi9ob21lL2dhbWVzLWxvZ28tNS5wbmcnKQogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+CiAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIFBlbWJhdGFzIC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJob21lLWJhbm5lci1jb250YWluZXItMyI+PC9kaXY+CiAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgPGItY29sCiAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICBtZD0iMSIKICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6IGJsYWNrOyBwYWRkaW5nOiAwJTsgbWFyZ2luOiAwJSIKICAgICAgICAgID4KICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgPC9iLXJvdz4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS0gU0VPIERlc2NyaXB0aW9uIC0tPgogICAgPGItcm93IGNsYXNzPSJEZXNrdG9wSG9tZSBob21lLXRleHQtdGl0bGUiIGFsaWduLXY9ImNlbnRlciI+CiAgICAgIDxoMSBjbGFzcz0iaG9tZS10ZXh0LWRlc2NyaXB0aW9uIj4KICAgICAgICBTbG90IE9ubGluZSBEZXBvIFB1bHNhIEtyaXB0bzcwNyBTaXR1cyBTbG90CiAgICAgIDwvaDE+CiAgICA8L2Itcm93PgogICAgPGItcm93IGNsYXNzPSJEZXNrdG9wSG9tZSBob21lLXRleHQtc3VidGl0bGUiPgogICAgICA8aDIgY2xhc3M9ImhvbWUtc3VidGV4dC1kZXNjcmlwdGlvbiI+CiAgICAgICAgR2FtZQogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwOi8vMTU4LjI1NS40Ny4xOTkvIgogICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICA+c2xvdCBvbmxpbmU8L2EKICAgICAgICA+CiAgICAgICAgbWVuamFkaSBzYWxhaCBzYXR1IGNhcmEgeWFuZyBiaXNhIGRpbGFrdWthbiBvbGVoIHBhcmEgcGVuamVsYWphaAogICAgICAgIG9ubGluZSB1bnR1ayBtZW5jYXJpIHVhbmcgc2VjYXJhIG9ubGluZSBkZW5nYW4gYmVybWFpbiBkaSBzaXR1cwogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwOi8vMTU4LjI1NS40Ny4xOTkvIgogICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICA+c2xvdCBkZXBvIHB1bHNhPC9hCiAgICAgICAgPi4gRGVuZ2FuIGhhbnlhIG1lbmdhbmRhbGthbiBrb25la3NpIGludGVybmV0IGRhbiBwdWxzYSB0ZWxwb24sIHBhcmEKICAgICAgICBwZW1haWFuIGdhbWUgc2xvdCBzdWRhaCBiaXNhIGJlcm1haW4gZ2FtZSBzbG90IG9ubGluZSBwYWRhIG1lc2luIHNsb3QKICAgICAgICBrZXN1a2Fhbm55YSBkaSBtYW5hIHB1biBkYW4ga2FwYW4gcHVuIG1lbmdndW5ha2FuIHBvbnNlbCBwaW50YXIKICAgICAgICBhdGF1cHVuIGtvbXB1dGVyIHlhbmcgbWVyZWthIG1pbGlraS4gVGVudHVueWEgcGVybWFpbmFuIGhhcnVzIGRpCiAgICAgICAgbGFrdWthbiBkaSBzaXR1cyBqdWRpIHNsb3Qgb25saW5lIHlhbmcgc2FhdCBpbmkgYWdlbiBqdWRpIHNsb3Qgb25saW5lCiAgICAgICAgYXRhdSBzaW5na2F0bnlhIDxzdHJvbmc+IGFnZW4gc2xvdCA8L3N0cm9uZz4gZGFwYXQgbXVkYWggZGkgY2FyaSBkYW4KICAgICAgICBkaWRhcGF0a2FuIGRhcmkgZGFmdGFyIHNsb3Qgb25saW5lIHRlcmJhaWsgZGkgSW50ZXJuZXQuIDxiciAvPjxiciAvPgogICAgICAgIE1lc2tpIGtlbGloYXRhbm55YSBtdWRhaCB1bnR1ayBtZW5kYXBhdGthbgogICAgICAgIDxzdHJvbmc+c2xvdCB0ZXJwZXJjYXlhPC9zdHJvbmc+LCBhZGEgYmViZXJhcGEga2VuZGFsYSB5YW5nIGJpYXNhbnlhCiAgICAgICAgZGloYWRhcGkga2V0aWthIGFrYW4gYmVybWFpbiBvbmxpbmUgc2xvdCBkaSBjYXNpbm8gb25saW5lLiBTYWxhaAogICAgICAgIHNhdHVueWEgYWRhbGFoIG1lbWlsaWggc2l0dXMganVkaSBvbmxpbmUgdW50dWsgbWVuZGFwYXRrYW4KICAgICAgICA8c3Ryb25nPmFnZW4gc2xvdCBvbmxpbmUgdGVyYmFpazwvc3Ryb25nPi4gVGlkYWsgc2VkaWtpdCBzaXR1cyBzbG90CiAgICAgICAgb25saW5lIGJhcnUgeWFuZyBqdXN0cnUgbWVsYWt1a2FuIGtlY3VyYW5nYW4gZGFuIG1lbWJ1YXQgcGFyYSBwZW1haW4KICAgICAgICB0ZXJ1cyBtZW5nYWxhbWkga2VrYWxhaGFuLiBKaWthIGJlcnRlbXUgZGVuZ2FuIGJhbmRhciBqdWRpIHNsb3QKICAgICAgICBzZXBlcnRpIGluaSwgYmVyYXBhIHB1biBtb2RhbCB1YW5nIGFzbGkgZGFuIHB1bHNhIHlhbmcgQW5kYSBtaWxpa2kKICAgICAgICBha2FuIGhhYmlzIHRlcmt1cmFzIGRhbGFtIHdha3R1IHlhbmcgcmVsYXRpZiBzaW5na2F0IC4gPGJyIC8+PGJyIC8+CiAgICAgICAgVW50dWsgbWVuZ2FudGlzaXBhc2kga2VqYWRpYW4gc2VwZXJ0aSBpbmkgbWFrYSBraXRhIGRhcGF0IG1lbmNhcmkKICAgICAgICB0ZXJsZWJpaCBkYWh1bHUgZGkgaW50ZXJuZXQgc2l0dXMgc2xvdCBvbmxpbmUgZGVwb3NpdCBwdWxzYSB0YW5wYQogICAgICAgIHBvdG9uZ2FuIGFwYSB5YW5nIGRpcmVrb21lbmRhc2lrYW4gdGVydXRhbWEgZGkgcmVrb21lbmRhc2lrYW4gcGFkYQogICAgICAgIGRhZnRhciBzbG90IHRlcnBlcmNheWEuIFBpbGlobGFoIHNpdHVzIGp1ZGkgc2xvdCBvbmxpbmUgeWFuZyBtZW1hbmcKICAgICAgICBzdWRhaCBtZW1pbGlraSByZWthbSBqZWphayBkYW4gZmVlZGJhY2sgYmFndXMgZGkgaW50ZXJuZXQsIHNlcGVydGkKICAgICAgICA8c3Ryb25nPktyaXB0bzcwNyBzbG90IGRlcG8gcHVsc2E8L3N0cm9uZz4uIEtyaXB0bzcwNyBtZW5na2h1c3Vza2FuIGRpcmkKICAgICAgICBwYWRhIHNsb3Qgb25saW5lIGRlcG9zaXQgcHVsc2EgdGFucGEgcG90b25nYW4geWFuZyB0ZW50dW55YSBhZGFsYWgKICAgICAgICBqdWRpIHNsb3QgZGVwb3NpdCBwdWxzYSBkYWkgYmVyYWdhbSBqZW5pcy4gPGJyIC8+PGJyIC8+CiAgICAgICAgS3JpcHRvNzA3IDxzdHJvbmc+c2l0dXMganVkaSBzbG90PC9zdHJvbmc+IG1lcnVwYWthbiBvZmZpY2lhbCBwYXJ0bmVyCiAgICAgICAgZGFyaSBiZWJlcmFwYSBwdWJsaXNoZXIgZ2FtZXMganVkaSBvbmxpbmUgdGVya2VtdWthIGR1bmlhIGRhbiB0ZXJrZW5hbAogICAgICAgIHNlYmFnYWkgPHN0cm9uZz5hZ2VuIGp1ZGkgc2xvdCBvbmxpbmU8L3N0cm9uZz4geWFuZyBib25hZmlkZS4gQW5kYQogICAgICAgIGJpc2EgYmVybWFpbiBqdWRpIHNsb3Qgb25saW5lIGRlcG9zaXQgcHVsc2EgdGVybmFtYSwgc2VwZXJ0aQogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwczovL3d3dy5wcmFnbWF0aWNwbGF5LmNvbS8iCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgID5QcmFnbWF0aWMgUGxheTwvYQogICAgICAgID4KICAgICAgICBkYW4KICAgICAgICA8YQogICAgICAgICAgaHJlZj0iaHR0cHM6Ly9oYWJhbmVyb3N5c3RlbXMuY29tLyIKICAgICAgICAgIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgPkhhYmFuZXJvIFNsb3Q8L2EKICAgICAgICA+CiAgICAgICAgaGluZ2dhIGp1ZGkgYm9sYSBkaSBJc29CZXQganVkaSBvbmxpbmUgc2xvdC4gWWFraW5sYWggcGFzdGkgYWdlbiBqdWRpCiAgICAgICAgc2xvdCBzYXR1LXNhdHVueWEgeWFuZyBiYW55YWsgYmVyZWRhciBkaSBkdW5pYSBtYXlhIGRhbiB0ZXJrZW5hbCBha2FuCiAgICAgICAga2VhbWFuYW4gc2xvdCB0ZXJwZXJjYXlhIGFkYWxhaCBjdW1hCiAgICAgICAgPHN0cm9uZz5Jc29iZXQganVkaSBzbG90IG9ubGluZTwvc3Ryb25nPiB0ZXJwZXJjYXlhLiA8YnIgLz48YnIgLz4KICAgICAgICBCZXJiZWthbCBtZW5qYWRpIHBhcnRuZXIgcmVzbWkgc2l0dXMganVkaSBzbG90IG9ubGluZSBkaSBJbmRvbmVzaWEsCiAgICAgICAgPHN0cm9uZz5Jc29CZXQ8L3N0cm9uZz4gZGlwYXN0aWthbiBiZWJhcyBkYXJpIGtlY3VyYW5nYW4gc2VoaW5nZ2EgQW5kYQogICAgICAgIGJpc2EgYmVybWFpbiBkZW5nYW4gdGVuYW5nIGRhbiBueWFtYW4uIFRlcmxlYmloIGxhZ2ksIHNpdHVzCiAgICAgICAgPHN0cm9uZz5Jc29CZXQ8L3N0cm9uZz4gZGFwYXQgZGVuZ2FuIG11ZGFoIGRpYWtzZXMgbGV3YXQgYmFueWFrCiAgICAgICAgcGVyYW5na2F0IHNlcGVydGkga29tcHV0ZXIsIGxhcHRvcCwgc2VydGEgc21hcnRwaG9uZSBkZW5nYW4gc2lzdGVtCiAgICAgICAgb3BlcmFzaSBBbmRyb2lkIGF0YXVwdW4gaU9zIGRhbiBzZW11YSB0ZW50dW55YSB1bnR1ayBiZXJtYWluIGdhbWUgc2xvdAogICAgICAgIG9ubGluZSBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuLjxiciAvPgogICAgICA8L2gyPgogICAgPC9iLXJvdz4KICAgIDxiLXJvdyBjbGFzcz0iRGVza3RvcEhvbWUgaG9tZS10ZXh0LXRpdGxlIiBhbGlnbi12PSJjZW50ZXIiPgogICAgICA8aDIgY2xhc3M9ImhvbWUtdGV4dC1kZXNjcmlwdGlvbiI+CiAgICAgICAgQmFuZGFyIEdhbWluZyBTbG90IE9ubGluZSBUZXJwZXJjYXlhCiAgICAgIDwvaDI+CiAgICA8L2Itcm93PgogICAgPGItcm93IGNsYXNzPSJEZXNrdG9wSG9tZSBob21lLXRleHQtc3VidGl0bGUiPgogICAgICA8aDMgY2xhc3M9ImhvbWUtc3VidGV4dC1kZXNjcmlwdGlvbiI+CiAgICAgICAgSnVkaSA8c3Ryb25nPnNsb3QgZGVwb3NpdCBwdWxzYTwvc3Ryb25nPiB5YW5nIGJpYXNhbnlhIGhhbnlhIGJpc2EKICAgICAgICBkaW1haW5rYW4gZGkgbWVzaW4gc2xvdCB5YW5nIHRlcmRhcGF0IGRpIGdhbWUgc2xvdCBjYXNpbm8ga2luaSBiaXNhCiAgICAgICAgZGltYWlua2FuIGRpIG1hbmEgc2FqYSBkYW4ga2FwYW4gc2FqYSBsZXdhdCBzYWxhaCBzYXR1IGJlbnR1ayBqdWRpCiAgICAgICAgc2xvdCBvbmxpbmUgdGVycGVyY2F5YSwgYXRhdSBzaW5na2F0bnlhIGdhbWUgc2xvdC4gTGV3YXQgc2l0dXMgc2xvdAogICAgICAgIG9ubGluZSwgc2VtdWFueWEgZGltYWlua2FuIG1lbGFsdWkgc2FsYWggc2F0dSBzaXR1cyBqdWRpIHNsb3QgeWFuZwogICAgICAgIHRlbGFoIGRpamFsaW4ga2VyamFzYW1hbnlhIGRlbmdhbiBwcm92aWRlciBnYW1lIHNsb3Qgb25saW5lIGRpIGR1bmlhLgogICAgICAgIERpIEluZG9uZXNpYSBzZW5kaXJpLCBzYWxhaCBzYXR1IHNpdHVzIGp1ZGkgc2xvdCBvbmxpbmUgeWFuZyB0ZWxhaAogICAgICAgIG1lbGFrdWthbiBrZXJqYSBzYW1hIGRlbmdhbiBiZXJiYWdhaSBwdWJsaXNoZXIganVkaSBzbG90IG9ubGluZQogICAgICAgIHRlcnBlcmNheWEgYWRhbGFoIElzb0JldC4gTW90byBJc29CZXQgYWRhbGFoICJNZW1iZXJpa2FuIHBlbmdhbGFtYW4KICAgICAgICBkYW4ga2V1bnR1bmdhbiBsdWFyIGJpYXNhIGtlcGFkYSBwYXJhIHBlbWFpbiBzbG90IGRlcG8gcHVsc2EgaGFueWEgZGkKICAgICAgICBzaXR1cyBqdWRpIHNsb3Qgb25saW5lIHRlcnBlcmNheWEgSXNvQmV0Ii4gPGJyIC8+PGJyIC8+CiAgICAgICAgVGVudHVueWEga2l0YSBzdWRhaCB0aWRhayBhc2luZyBkZW5nYW4gcHJvdmlkZXIgc2xvdCBvbmxpbmUgc2VwZXJ0aQogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwOi8vNS43Ny4zOS4xMjYvIgogICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgICAgICA+SG90d2luPC9hCiAgICAgICAgPiwgc2xvdCBqb2tlcjEyMywgc2xvdCBQcmFnbWF0aWMgUGxheSwgSGFiYW5lcm8gU2xvdCwgTWljcm9nYW1pbmcsCiAgICAgICAgU3BhZGUgR2FtaW5nIGF0YXVwdW4gUlRHIFNsb3QuIEdhbWUtZ2FtZSBzbG90IG9ubGluZSBtZXJla2EgbWVydXBha2FuCiAgICAgICAgZ2FtZS1nYW1lIHNsb3Qgb25saW5lIHlhbmcgcGFsaW5nIHNlcmluZyBkaW1haW5rYW4gcGVtYWluIHNsb3Qgb25saW5lCiAgICAgICAgdWFuZyBhc2xpIGRpIHNlbHVydWggZHVuaWEuIFNlbGFpbiBpdHUgbWVyZWthIGp1Z2EgZGFwYXQgYmVybWFpbgogICAgICAgIGdhbWluZyBzbG90IGxhaW4gZGkgbWVzaW4gc2xvdCBvbmxpbmUgc2VwZXJ0aSBsaXZlIGNhc2lubyBvbmxpbmUsCiAgICAgICAgcG9rZXIgb25saW5lIGhpbmdnYSBrZSBqdWRpIGJvbGEuIEludGkgZGFyaSBrZXNlbXVhbnlhIGFkYWxhaCBpbmdpbgogICAgICAgIG1lbmRhcGF0a2FuIGJvbnVzIGphY2twb3QgZGFyaSBzYWxhaCBzYXR1IHBlbnllZGlhIHNpdHVzIGp1ZGkgc2xvdAogICAgICAgIG9ubGluZSB0ZXJwZXJjYXlhIDI0IGphbS4gPGJyIC8+PGJyIC8+CiAgICAgICAgTWFzaW5nLW1hc2luZyBwcm92aWRlciBtZW1iYXdhIHB1bHVoYW4gaGluZ2dhIHJhdHVzYW4gZ2FtZSBzbG90IG9ubGluZQogICAgICAgIHlhbmcgYmlzYSBBbmRhIG1haW5rYW4gc2VzdWFpIGRlbmdhbiBrZWdlbWFyYW4ga2l0YS4gTWFzaW5nLW1hc2luZwogICAgICAgIGdhbWUgc2xvdCB0ZXJiYWlrIGluaSB0ZW50dW55YSBtZW1pbGlraSB0ZW1hIHlhbmcgYmVyYmVkYSwgbXVsYWkgZGFyaQogICAgICAgIHRlbWEgc2VqYXJhaCBoaW5nZ2EgZmlsbSB5YW5nIHRlbmdhaCBwb3B1bGVyIHNhYXQgaW5pLiBTZWxhaW4gaXR1LAogICAgICAgIG1hc2luZy1tYXNpbmcgcGVybWFpbmFuIGp1ZGkgPHN0cm9uZz5zbG90IGRlcG9zaXQgcHVsc2E8L3N0cm9uZz4gYmFpawogICAgICAgIGRlbmdhbiBkZXBvc2l0IHZpYSBwdWxzYSB0ZWxrb21zZWwsIGxpbmsgYWphIGF0YXUgeWFuZyBsYWluLCBqdWdhCiAgICAgICAgbWVtcHVueWFpIG5pbGFpIG1ha3NpbWFsIGphY2twb3QgeWFuZyBiZXJiZWRhIGRpIHNldGlhcCB0YXJ1aGFuIGp1ZGksCiAgICAgICAgc2VoaW5nZ2Ega2l0YSBtZW1pbGlraSBiYW55YWsgcGlsaWhhbiBpbmdpbiBiZXJtYWluIGRpIGdhbWUganVkaSBzbG90CiAgICAgICAgcHVsc2EgeWFuZyByZWxhdGlmIG11ZGFoIG1lbmRhcGF0a2FuIGphY2twb3QgdGVyYmVzYXIgdGV0YXBpIG5pbGFpbnlhCiAgICAgICAga2VjaWwgYXRhdSB5YW5nIGphcmFuZyBib251cyBqYWNrcG90IHRhcGkgbmlsYWlueWEgc2FuZ2F0IGJlc2FyLgogICAgICAgIDxiciAvPjxiciAvPgogICAgICAgIFRlbnR1bnlhIGRlbmdhbiBiZXJtYWluIDxzdHJvbmc+c2xvdCBkZXBvIHB1bHNhPC9zdHJvbmc+IGRpIElzb0JldAogICAgICAgIEFuZGEgYWthbiBtZW5kYXBhdCBiZXJiYWdhaSBrZXVudHVuZ2FuIHlhbmcgdGlkYWsgYmlzYSBBbmRhIGRhcGF0a2FuCiAgICAgICAgZGkgc2l0dXMganVkaSBzbG90IG9ubGluZSBsYWlubnlhLiBCZXJpa3V0IGluaSBhZGFsYWggdWxhc2FuIGRhcmkKICAgICAgICBrZXVudHVuZ2FuIGlrdXQgc2VydGEgbWVuamFkaQogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwOi8vMTU4LjI1NS40Ny4xOTkvcmVnaXN0ZXIiCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgID5uZXcgbWVtYmVyPC9hCiAgICAgICAgPgogICAgICAgIGRpIElzb0JldCBzaXR1cyBqdWRpIHNsb3Qgb25saW5lIHRlcnBlcmNheWE6PGJyIC8+CiAgICAgIDwvaDM+CiAgICA8L2Itcm93PgogICAgPGItcm93IGNsYXNzPSJEZXNrdG9wSG9tZSBob21lLXN1YnRleHQtdGl0bGUiIGFsaWduLXY9ImNlbnRlciI+CiAgICAgIDxoMiBjbGFzcz0iaG9tZS1zdWJ0ZXh0LXN1YmRlc2NyaXB0aW9uIj4KICAgICAgICBLZXVudHVuZ2FuIE1haW4gZGkgU2l0dXMgU2xvdCBJc29CZXQKICAgICAgPC9oMj4KICAgIDwvYi1yb3c+CiAgICA8Yi1yb3cgY2xhc3M9IkRlc2t0b3BIb21lIGhvbWUtdGV4dC1zdWJ0aXRsZSI+CiAgICAgIDxoMyBjbGFzcz0iaG9tZS1zdWJ0ZXh0LWRlc2NyaXB0aW9uIj4KICAgICAgICBTYXR1IGtldW50dW5nYW4gbmV3IG1lbWJlciB0ZXJiZXNhciBqaWthIG1haW4KICAgICAgICA8c3Ryb25nPnNsb3QgZGVwbyBwdWxzYTwvc3Ryb25nPiBkaSBJc29CZXQgc2xvdCBpbmRvbmVzaWEgb25saW5lIHJlc21pCiAgICAgICAgYWRhbGFoIGtpdGEgYWthbiBtZW5kYXBhdGthbiBiZXJiYWdhaSBib251cyB5YW5nIHRpZGFrIGJpc2EgZGlkYXBhdGthbgogICAgICAgIGRpIHNpdHVzIGp1ZGkgb25saW5lIGluZG9uZXNpYSBsYWlubnlhLiBBcGEgc2FqYSBrZXVudHVuZ2FuIHRlcmJhaWsKICAgICAgICBzbG90IHlhbmcgZGltYWtzdWQ/IEJlcmlrdXQgaW5pIGJlYmVyYXBhIGRpIGFudGFyYW55YTogPGJyIC8+CiAgICAgIDwvaDM+CiAgICA8L2Itcm93PgogICAgPGItcm93IGNsYXNzPSJEZXNrdG9wSG9tZSBob21lLXN1YnRleHQtdGl0bGUiIGFsaWduLXY9ImNlbnRlciI+CiAgICAgIDxoMiBjbGFzcz0iaG9tZS1zdWJ0ZXh0LXN1YmRlc2NyaXB0aW9uLXNtYWxsIj4KICAgICAgICBCb251cyBkYW4gUHJvbW9zaSBNZW5hcmlrCiAgICAgIDwvaDI+CiAgICA8L2Itcm93PgogICAgPGItcm93IGNsYXNzPSJEZXNrdG9wSG9tZSBob21lLXRleHQtc3VidGl0bGUiPgogICAgICA8aDMgY2xhc3M9ImhvbWUtc3VidGV4dC1kZXNjcmlwdGlvbiI+CiAgICAgICAgRGVuZ2FuIGJlcm1haW4gZGkgc2l0dXMgSXNvYmV0IG9ubGluZSByZXNtaSBtdWRhaCBtZW5hbmcga2l0YSBtZW1pbGlraQogICAgICAgIGtlc2VtcGF0YW4gdW50dWsgbWVuZGFwYXRrYW4gYm9udXMgZGFuIHByb21vc2kgbWVuYXJpayBiZXJ1cGEgc2FsZG8KICAgICAgICBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuIHlhbmcgYmlzYSBkaWd1bmFrYW4gc2ViYWdhaSB0YW1iYWhhbgogICAgICAgIG1vZGFsIGRhbGFtIGJlcm1haW4gPHN0cm9uZz5zbG90IGRlcG8gcHVsc2E8L3N0cm9uZz4gcGFkYSBzaXR1cyBqdWRpCiAgICAgICAgc2xvdCBvbmxpbmUgdGVyYmFpay4gU2VtdWEgamVuaXMgb25saW5lIHNsb3QgcGFkYSBkYWZ0YXIgc2xvdCBkaQogICAgICAgIElzb0JldCBtZW1hc3Rpa2FuIG1lbWJlciBtZW5kYXBhdGthbiBib251cyBkYW4gcHJvbW9zaSB0ZXJiYWlrIGJhaWsKICAgICAgICBpdHUgcHVsc2EgbWF1cHVuIHVhbmcgYXNsaSwgZGFuIHRlbnV0bnlhCiAgICAgICAgPHN0cm9uZz5zbG90IGRlcG9zaXQgcHVsc2E8L3N0cm9uZz4gbWVuamFkaSBwaWxpaGFuIG1lbWJlciB0ZXJhdGFzIGRpCiAgICAgICAgYWdlbiBzbG90IGRlcG9zaXQgcHVsc2EgaW5kb25lc2lhLiA8YnIgLz48YnIgLz4KICAgICAgICBTZWJhZ2FpIGNvbnRvaCwgc2FhdCBpbmkgdGVyc2VkaWEgcHJvbW9zaSBib251cyB3ZWxjb21lIG1lbWJlciAxMDAlCiAgICAgICAgZGFuIGRlcG9zaXQgcHVsc2EgdGFucGEgcG90b25nYW4sIGRpIG1hbmEgbWVtYmVyIGJhcnUgZGFwYXQgYm9udXMKICAgICAgICBrcmVkaXQgc2VjYXJhIGdyYXRpcyBkYW4ga2l0YSBha2FuIHRldGFwIG1lbmRhcGF0a2FuIHVhbmcgYXNsaSBkYWxhbQogICAgICAgIGtyZWRpdCBqdWRpCiAgICAgICAgPGEKICAgICAgICAgIGhyZWY9Imh0dHA6Ly8xNTguMjU1LjQ3LjE5OS8iCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgID5zbG90IGRlcG9zaXQgcHVsc2E8L2EKICAgICAgICA+CiAgICAgICAga2l0YS4gRGFsYW0gd2FrdHUgdGVydGVudHUgcHVuIHRlcnNlZGlhIGV2ZW50IGZyZWVzcGluIHNpdHVzIGp1ZGkKICAgICAgICBzbG90LiBLYW1pIGp1Z2EgYWthbiBtZW5nYWRha2FuIGV2ZW50IHNldGlhcCBidWxhbm55YSBkZW5nYW4gaGFkaWFoCiAgICAgICAgbWVuYXJpayBiYWdpIHBhcmEgcGVjaW50YSBnYW1lIGp1ZGkgb25saW5lIHNsb3QgdGVydXRhbWEgYm9udXMgZG91YmxlCiAgICAgICAgYmFnaSBwYXJhIFZJUCBtZW1iZXIgYWdlbiBzbG90IElzb0JldCBzaXR1cyBqdWRpIHNsb3QgZGVwbyBwdWxzYQogICAgICAgIHRlcmJhaWsuIDxiciAvPgogICAgICA8L2gzPgogICAgPC9iLXJvdz4KICAgIDxiLXJvdyBjbGFzcz0iRGVza3RvcEhvbWUgaG9tZS1zdWJ0ZXh0LXRpdGxlIiBhbGlnbi12PSJjZW50ZXIiPgogICAgICA8aDIgY2xhc3M9ImhvbWUtc3VidGV4dC1zdWJkZXNjcmlwdGlvbi1zbWFsbCI+CiAgICAgICAgSmFja3BvdCBUZXJiZXNhciBTbG90IE9ubGluZSBUZXJiZXNhcgogICAgICA8L2gyPgogICAgPC9iLXJvdz4KICAgIDxiLXJvdyBjbGFzcz0iRGVza3RvcEhvbWUgaG9tZS10ZXh0LXN1YnRpdGxlIj4KICAgICAgPGgzIGNsYXNzPSJob21lLXN1YnRleHQtZGVzY3JpcHRpb24iPgogICAgICAgIFNlbXVhIGRhcmkga2l0YSBpbmdpbiBtZW5kYXBhdGthbiBqYWNrcG90IGtldGlrYSBzZWRhbmcgYmVybWFpbiBkaQogICAgICAgIHNpdHVzIHNsb3QgYmFpayBpdHUgbWVzaSBzbG90LCBsaXZlIGNhc2lubyBvbmxpbmUgYXRhdXB1biB0YXJ1aGFuIGp1ZGkKICAgICAgICBsYWlubnlhIGRpIGFnZW4ganVkaSBzbG90IHRlcnBlcmNheWEuIEFwYWxhZ2kgamlrYSBoYWRpYWggeWFuZyBiaXNhCiAgICAgICAgZGlkYXBhdCBqdW1sYWhueWEgc2FuZ2F0IGJlc2FyIGJ1a2FuPyA8YnIgLz48YnIgLz4KICAgICAgICBKaWthIGtpdGEgbWFpbiBkaSBzaXR1cyBqdWRpIG9ubGluZSBzbG90IHNlcGVydGkgSXNvQmV0IGFnZW4gc2xvdCwKICAgICAgICBraXRhIG1lbWlsaWtpIGtlc2VtcGF0YW4gdW50dWsgbWVyYWloIGtlbWVuYW5nYW4KICAgICAgICA8c3Ryb25nPnNsb3QgZGVwb3NpdCBwdWxzYTwvc3Ryb25nPiBoaW5nZ2EgcmF0dXNhbiBqdXRhIHJ1cGlhaC4gQW5kYQogICAgICAgIHRpZGFrIHBlcmx1IHRha3V0IGppa2Ega2VtZW5hbmdhbgogICAgICAgIDxzdHJvbmc+c2xvdCBkZXBvIHB1bHNhPC9zdHJvbmc+IEFuZGEgcGFkYSBwZXJtYWlhbiBzaXR1cyBqdWRpIHNsb3QKICAgICAgICB0aWRhayBkaWJheWFya2FuIGthcmVuYSB0aWRhayBhZGEgYmF0YXMgbWF4aW1hbCB3aXRoZHJhdyBkaSBJc29CZXQKICAgICAgICBhZ2VuIGp1ZGkgb25saW5lLCBuYWlrIGl0dSByYXR1c2FuIGp1Z2EgaGluZ2dhIG1pbGlhcmFuIHJ1cGlhaCBkaQogICAgICAgIHNlbXVhIHBlcm1haW5hbiBtdWRhaCBtZW5hbmcgc2VwZXJ0aSBzbG90IHRlcmJhaWsgc2xvdCBKb2tlcjEyMywgc2xvdAogICAgICAgIFByYWdtYXRpYywgUG9rZXIgT25saW5lIEluZG9uZXNpYSBhdGF1cHVuIGdhbWUganVkaSBzbG90IGxhaW5ueWEgLS0KICAgICAgICBzZW11YSBwYXN0aSBkaWJheWFyLiBQYXJhIG5ldyBtZW1iZXIgZGlwYXN0aWthbiBha2FuIG55YW1hbiBkYW4gYW1hbgogICAgICAgIGF0YXMgdHJhbnNha3NpbnlhIGthcmVuYSBJc29CZXQgYWdlbiBzbG90IG9ubGluZSBzZWJhZ2FpIG1pdHJhIHBhcmEKICAgICAgICBwcm92aWRlciBnYW1lIGtlbGFzIGR1bmlhIG1lbnlpYXBrYW4gY3VzdG9tZXIgc2VydmljZSAyNCBqYW0gc2xvdAogICAgICAgIHRlcmJhaWsgc2VsYW1hIHBlcm1haW5hbiBraXRhLiBDdXN0b21lciBzZXJ2aWNlIDI0IGphbSBpbmkgYWthbgogICAgICAgIG1lbmRhbXBpbmdpIHBhcmEgcGVtYWluIHNsb3QgZGVwbyBwdWxzYSBkYWxhbSBwZXJtYWluYW4gZGkgc2l0dXMgc2xvdAogICAgICAgIElzb0JldCBhZ2VuIGp1ZGkgb25saW5lIHRlcmJlc2FyIGRhbiBwZW55ZWRpYSBzbG90IGluZG9uZXNpYSBzbG90CiAgICAgICAgdGVyYmFpay4gPGJyIC8+CiAgICAgIDwvaDM+CiAgICA8L2Itcm93PgogICAgPGItcm93IGNsYXNzPSJEZXNrdG9wSG9tZSBob21lLXN1YnRleHQtdGl0bGUiIGFsaWduLXY9ImNlbnRlciI+CiAgICAgIDxoMiBjbGFzcz0iaG9tZS1zdWJ0ZXh0LXN1YmRlc2NyaXB0aW9uLXNtYWxsIj4KICAgICAgICBEYXRhIFByaWJhZGkgRGlqYW1pbiBLZWFtYW5hbm55YQogICAgICA8L2gyPgogICAgPC9iLXJvdz4KICAgIDxiLXJvdyBjbGFzcz0iRGVza3RvcEhvbWUgaG9tZS10ZXh0LXN1YnRpdGxlIj4KICAgICAgPGgzIGNsYXNzPSJob21lLXN1YnRleHQtZGVzY3JpcHRpb24iPgogICAgICAgIEtlYm9jb3JhbiBkYXRhIHRlbnR1IG1lbmphZGkgaGFsIHlhbmcgcGFsaW5nIGluZ2luIGRpaGluZGFyaSBvbGVoCiAgICAgICAgcGVuanVkaSBkaSBtYW5hIHB1biBtZXJla2EgYmVybWFpbi4gSGFsIGluaSBkaWthcmVuYWthbiBrZWJvY29yYW4gZGF0YQogICAgICAgIGFrYW4gbWVtYnVhdCBpZGVudGl0YXMgYXNsaSBwZW1haW4gYWthbiB0ZXJzZWJhciBsdWFzIGRhbiBtZW5nZ2FuZ2d1CiAgICAgICAga2VueWFtYW5hbiBkYW4ga2VhbWFuYW4gZGFyaSBwYXJhIHBlanVkaS4gPGJyIC8+PGJyIC8+CiAgICAgICAgQW5kYSB0aWRhayBwZXJsdSB0YWt1dCBoYWwgaW5pIHRlcmphZGkgamlrYSBiZXJtYWluIHNsb3Qgb25saW5lIGRpCiAgICAgICAgSXNvYmV0IDxzdHJvbmc+c2xvdCBkZXBvIHB1bHNhPC9zdHJvbmc+LiBTZXRlbGFoIEFuZGEgbWVsYWt1a2FuCiAgICAgICAgcmVnaXN0cmFzaSwgc2V0aWFwIGRhdGEgbWVtYmVyIGRpIHNpdHVzIGp1ZGkgc2xvdCBJc29CZXQgeWFuZyBkaXRlcmltYQogICAgICAgIGFrYW4gZGktZW5rcmlwc2kgZGVuZ2FuIHNpc3RlbSB0ZXJjYW5nZ2loIHNlaGluZ2dhIGRhdGEgZGlyaSBwcmliYWRpCiAgICAgICAgYW1hbiBkYW4gdGlkYWsgYWthbiBqYXR1aCBrZSB0YW5nYW4geWFuZyBzYWxhaC4gU2VtdWEgZGF0YSBiYWlrIGRhdGEKICAgICAgICBwcmliYWRpLCBkYXRhIGZpbmFuc2lhbCwgZGF0YSBwZXJtYWluYW4gbWVzaW4gc2xvdCwgc2VtdWEgZGVwb3NpdAogICAgICAgIHB1bHNhIHRhbnBhIHBvdG9uZ2FuIGFrYW4gYW1hbiBkaXNpbXBhbiBkaSBkYXRhYmFzZSBrYW1pLiA8YnIgLz4KICAgICAgPC9oMz4KICAgIDwvYi1yb3c+CiAgICA8Yi1yb3cgY2xhc3M9IkRlc2t0b3BIb21lIGhvbWUtc3VidGV4dC10aXRsZSIgYWxpZ24tdj0iY2VudGVyIj4KICAgICAgPGgyIGNsYXNzPSJob21lLXN1YnRleHQtc3ViZGVzY3JpcHRpb24iPgogICAgICAgIENhcmEgTWVuYW5nIEp1ZGkgT25saW5lIGRlbmdhbiBNdWRhaAogICAgICA8L2gyPgogICAgPC9iLXJvdz4KICAgIDxiLXJvdyBjbGFzcz0iRGVza3RvcEhvbWUgaG9tZS10ZXh0LXN1YnRpdGxlIj4KICAgICAgPGgzIGNsYXNzPSJob21lLXN1YnRleHQtZGVzY3JpcHRpb24iPgogICAgICAgIFNpYXBhcHVuIHBhc3RpbnlhIGluZ2luIG1lbWFpbmthbiBwZXJtYWluYW4ganVkaSBvbmxpbmUgeWFuZyBtdWRhaAogICAgICAgIG1lbmFuZyBkaSBiYW5kYXIganVkaSBzbG90LiBUZW50dW55YSBpbmkgZGlrYXJlbmFrYW4gamFja3BvdCBhdGF1CiAgICAgICAgYm9udXMganVkaSBvbmxpbmUgeWFuZyBiZXNhciB0ZW50dW55YSBzdWRhaCBtZW5hbnRpIHVudHVrIGJpc2EgZGlyYWloCiAgICAgICAgcGFyYSBwZW1lbmFuZyBzbG90IHRlcnBlcmNheWEuIE1lc2tpIGJlZ2l0dSwgYWRhIGJlYmVyYXBhIGxhbmdrYWggeWFuZwogICAgICAgIGJpc2EgQW5kYSBsYWt1a2FuIGFnYXIga2VtZW5hbmdhbiBkYWxhbSBiZXJtYWluIHNsb3Qgb25saW5lIGluaSBiaXNhCiAgICAgICAgZGlkYXBhdGthbiBkZW5nYW4gbXVkYWggZGFyaSBiYW5kYXIganVkaSBzbG90IGRlcG9zaXQgcHVsc2EgdGFucGEKICAgICAgICBwb3Rvbmdhbi4gQmVyaWt1dCBpbmkgYmViZXJhcGEgbGFuZ2thaCB5YW5nIGJpc2EgQW5kYSBsYWt1a2FuOiA8YnIgLz4KICAgICAgPC9oMz4KICAgIDwvYi1yb3c+CiAgICA8Yi1yb3cgY2xhc3M9IkRlc2t0b3BIb21lIGhvbWUtc3VidGV4dC10aXRsZSIgYWxpZ24tdj0iY2VudGVyIj4KICAgICAgPGgyIGNsYXNzPSJob21lLXN1YnRleHQtc3ViZGVzY3JpcHRpb24tc21hbGwiPgogICAgICAgIFBhaGFtaSBtYWluIHNsb3QgZGVwb3NpdCBwdWxzYSB0YW5wYSBwb3RvbmdhbgogICAgICA8L2gyPgogICAgPC9iLXJvdz4KICAgIDxiLXJvdyBjbGFzcz0iRGVza3RvcEhvbWUgaG9tZS10ZXh0LXN1YnRpdGxlIj4KICAgICAgPGgzIGNsYXNzPSJob21lLXN1YnRleHQtZGVzY3JpcHRpb24iPgogICAgICAgIE1lbWFoYW1pIHBlcm1haW5hbiBzbG90IGRlcG9zaXQgcHVsc2EgdGFucGEgcG90b25nYW4gYWRhbGFoIG1lcnVwYWthbgogICAgICAgIGhhbCBwYWxpbmcgcGVudGluZyBkYW4gYmlhc2FueWEganVzdHJ1IHRpZGFrIGRpaW5nYXQgb2xlaCBzZXNlb3JhbmcKICAgICAgICBzZWJlbHVtIG11bGFpIG1lbWFpbmthbiBzbG90IHB1bHNhLiBKaWthIEFuZGEgdGlkYWsgbWVtYWhhbWkgcGVybWFpbmFuCiAgICAgICAganVkaSBvbmxpbmUgc2xvdCBwdWxzYSB5YW5nIGluZ2luIGRpbWFpbmthbiwgaGFsIGluaSBzYW1hIHNhamEgc2VwZXJ0aQogICAgICAgIG1lbWJlbGkga3VjaW5nIGRhbGFtIGthcnVuZy4gQW5kYSBoYW55YSBha2FuIGJlcm1haW4ganVkaSBzbG90CiAgICAgICAgdGVycGVyY2F5YSB0YW5wYSB0YWh1IGFwYSB5YW5nIGFrYW4gZGloYWRhcGkuIEN1c3RvbWVyIHNlcnZpY2UgSXNvYmV0CiAgICAgICAgc2lhcCBtZW1iYW50dSBkYW4gbWVtYW5kdSBzZWdhbGEgcGVydGFueWFhbiBtYXVwdW4ga2VsdWgga2VzYWggcGFyYQogICAgICAgIFZJUCBtZW1iZXIgSXNvQmV0IDxzdHJvbmc+c2xvdCBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuLjwvc3Ryb25nPgogICAgICAgIDxiciAvPjxiciAvPgogICAgICAgIFNlYmFnYWkgY29udG9oIGJlcm1haW4gc2xvdCBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuLiBTZWJlbHVtCiAgICAgICAgYmVybWFpbiwgYWRhIGJhaWtueWEgamlrYSBBbmRhIG1lbmdlbmFsIGRhbiBtZW5naGFmYWxrYW4ga29tYmluYXNpCiAgICAgICAgc2ltYm9sCiAgICAgICAgPGEKICAgICAgICAgIGhyZWY9Imh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Nsb3RfbWFjaGluZSIKICAgICAgICAgIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgPnNsb3Q8L2EKICAgICAgICA+CiAgICAgICAgeWFuZyBiaXNhIG1lbmdoYWRpcmthbiBqYWNrcG90IGRhbGFtIGp1ZGkgc2xvdCBvbmxpbmUgZGkgc2l0dXMgc2xvdAogICAgICAgIHRlcmJhcnUuIFRhbnBhIG1lbmdlbmFsIGtvbWJpbmFzaSBpbmksIG11c3RhaGlsIEFuZGEgYmlzYSBtZW1lbmFuZ2thbgogICAgICAgIHBlcm1haW5hbiBzbG90IHRlcmJhcnUgeWFuZyBiYXJ1IGRpbGloYXQgZGFuIGRpa2VuYWwuIEJlZ2l0dSBqdWdhCiAgICAgICAgYXBhYmlsYSBtYXUgYmVybWFpbiBkaQogICAgICAgIDxzdHJvbmc+c2xvdCBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuPC9zdHJvbmc+IHRlcnBlcmNheWEgZGkKICAgICAgICBJbmRvbmVzaWEgbGFpbm55YS4gYmVybWFpbiBzbG90IHRlcmJhcnUgcHVsc2EgdGVudHUgaGFydXMgbWVuY29iYSBkZW1vCiAgICAgICAgbnlhIHRlcmxlYmloIGRhaHVsdSBzZWJlbHVtIG1haW4gZGVuZ2FuIGJhbmRhciBqdWRpIHNlYmVuYXJueWEuCiAgICAgICAgPGJyIC8+PGJyIC8+CiAgICAgICAgSGFsIHlhbmcgc2FtYSBqdWdhIGhhcnVzIEFuZGEgbGFrdWthbiBzZWJlbHVtIG1haW4gZGkgc2l0dXMKICAgICAgICA8c3Ryb25nPnNsb3QgZGVwb3NpdCBwdWxzYSB0YW5wYSBwb3Rvbmdhbjwvc3Ryb25nPiBsYWlubnlhLiBCZWJlcmFwYQogICAgICAgIHBlcm1haW5hbiA8c3Ryb25nPnNsb3QgZGVwbyBwdWxzYTwvc3Ryb25nPiBiaWFzYW55YSBiZXJodWJ1bmdhbiBkZW5nYW4KICAgICAgICB0ZW9yaSBwcm9iYWJpbGl0YXMgc2VoaW5nZ2EgQW5kYSBoYXJ1cyBiaXNhIG1lbGFrdWthbiBhbmFsaXNhCiAgICAgICAgcGVybWFpbmFuIGRlbmdhbiBtdWRhaCBkaSBzZXRpYXAgZGFmdGFyIHNsb3Qgb25saW5lIHRlcmJhaWsgeWFuZyBhZGEuCiAgICAgICAgPGJyIC8+PGJyIC8+CiAgICAgICAgU2ViYWdhaSBzaXR1cyA8c3Ryb25nPnNsb3QgZGVwb3NpdCBwdWxzYTwvc3Ryb25nPiB0ZXJiYWlrIGRpCiAgICAgICAgSW5kb25lc2lhLCBrYW1pIG1lbWJlcmlrYW4gQW5kYSBrZXNlbXBhdGFuIHVudHVrIG1lbGFrdWthbiB1amkgY29iYQogICAgICAgIHBlcm1haW5hbiBqdWRpIHNlYmVsdW0gbXVsYWkgbWVtYXNhbmcgdGFydWhhbiBwYWRhIGRhZnRhciBzbG90IG9ubGluZQogICAgICAgIGJhbmRhciBqdWRpIGNhc2lubyBvbmxpbmUgdGVycGVyY2F5YSBkaSBpbmRvbmVzaWEuIE1hbmZhYXRrYW4gaGFsCiAgICAgICAgdGVyc2VidXQgYWdhciBBbmRhIGJpc2EgbWVyYWloIGtldW50dW5nYW4gbWFrc2ltYWwgZGFyaSBzbG90IHRlcmJhcnUuCiAgICAgICAgPGJyIC8+CiAgICAgIDwvaDM+CiAgICA8L2Itcm93PgogICAgPGItcm93IGNsYXNzPSJEZXNrdG9wSG9tZSBob21lLXN1YnRleHQtdGl0bGUiIGFsaWduLXY9ImNlbnRlciI+CiAgICAgIDxoMiBjbGFzcz0iaG9tZS1zdWJ0ZXh0LXN1YmRlc2NyaXB0aW9uLXNtYWxsIj4KICAgICAgICBQZXJzaWFwa2FuIHdha3R1IHlhbmcgY3VrdXAKICAgICAgPC9oMj4KICAgIDwvYi1yb3c+CiAgICA8Yi1yb3cgY2xhc3M9IkRlc2t0b3BIb21lIGhvbWUtdGV4dC1zdWJ0aXRsZSI+CiAgICAgIDxoMyBjbGFzcz0iaG9tZS1zdWJ0ZXh0LWRlc2NyaXB0aW9uIj4KICAgICAgICBMYW5na2FoIHNlbGFuanV0bnlhIHlhbmcgaGFydXMgQW5kYSBsYWt1a2FuIHNldGVsYWggbWVtYWhhbWkgZ2FtZSBqdWRpCiAgICAgICAgb25saW5lIHlhbmcgQW5kYSBpbmNhciBhZGFsYWggamFuZ2FuIHRlcmJ1cnUtYnVydSBkYWxhbSBiZXJtYWluCiAgICAgICAgPHN0cm9uZz5zbG90IGRlcG9zaXQgcHVsc2E8L3N0cm9uZz4uIFNhbGFoIHNhdHUga2VzYWxhaGFuIHBlanVkaQogICAgICAgIHBlbXVsYSBiaWFzYW55YSB0ZXJqYWRpIGRhbGFtIHBlcm1haW5hbiBqdWRpIHNsb3Qgb25saW5lLiBNZXJla2EKICAgICAgICBiaWFzYW55YSBiZXJtYWluIHRlcmJ1cnUtYnVydSwgYXBhbGFnaSBrZXRpa2EgbWVyZWthIHN1ZGFoIG11bGFpCiAgICAgICAgbWVtZW5hbmdrYW4gcGVybWFpbmFuIGRpIHNpdHVzIGp1ZGkgc2xvdCBvbmxpbmUuIDxiciAvPjxiciAvPgogICAgICAgIEJlcm1haW5sYWggZGVuZ2FuIHNhbnRhaS4gS29uc2VudHJhc2kgZGFuIGtvbnNpc3RlbiBhZGFsYWgga3VuY2kgdXRhbWEKICAgICAgICB1bnR1ayBtZW1lbmFuZ2thbiBzZXRpYXAgcGVybWFpbmFuIHNsb3Qgb25saW5lLiBKaWthIHRlcmJ1cnUtYnVydSwKICAgICAgICBiaWFzYW55YSBrb25zZW50cmFzaSBha2FuIGxhbmdzdW5nIGhpbGFuZyBrZXRpa2EgQW5kYSBtZWxha3VrYW4KICAgICAgICBzZWRpa2l0IGtlc2FsYWhhbiBkYWxhbSBqdWRpIDxzdHJvbmc+c2xvdCBkZXBvc2l0IHB1bHNhPC9zdHJvbmc+LgogICAgICAgIEphbmdhbiBwZXJuYWggYmVyaGFyYXAgbGF3YW4gYWthbiBtZWxha3VrYW4ga2VzYWxhaGFuIHlhbmcgc2FtYSBrYXJlbmEKICAgICAgICBiaWFzYW55YSBtZXJla2Egc3VkYWggamF1aCBsZWJpaCBiZXJwZW5nYWxhbWFuIGRpIHNpdHVzIGp1ZGkgc2xvdAogICAgICAgIG9ubGluZS4gPGJyIC8+CiAgICAgIDwvaDM+CiAgICA8L2Itcm93PgogICAgPGItcm93IGNsYXNzPSJEZXNrdG9wSG9tZSBob21lLXN1YnRleHQtdGl0bGUiIGFsaWduLXY9ImNlbnRlciI+CiAgICAgIDxoMiBjbGFzcz0iaG9tZS1zdWJ0ZXh0LXN1YmRlc2NyaXB0aW9uLXNtYWxsIj4KICAgICAgICBMYWt1a2FuIHBlbmdhdHVyYW4gbW9kYWwgeWFuZyBiYWlrCiAgICAgIDwvaDI+CiAgICA8L2Itcm93PgogICAgPGItcm93IGNsYXNzPSJEZXNrdG9wSG9tZSBob21lLXRleHQtc3VidGl0bGUiPgogICAgICA8aDMgY2xhc3M9ImhvbWUtc3VidGV4dC1kZXNjcmlwdGlvbiI+CiAgICAgICAgTWFuYWplbWVuIG1vZGFsIG1lcnVwYWthbiBoYWwgcGVudGluZyBsYWluIHlhbmcgbXVkYWggc2VrYWxpIGRpbHVwYWthbgogICAgICAgIGtldGlrYSBiZXJtYWluIGp1ZGkgb25saW5lLiBTZW9yYW5nIHBlbmp1ZGkKICAgICAgICA8c3Ryb25nPnNsb3QgZGVwb3NpdCBwdWxzYTwvc3Ryb25nPiBrZXRpa2Egc3VkYWggYmVybWFpbiBiaWFzYW55YQogICAgICAgIHRpZGFrIGFrYW4gZm9rdXMgbGFnaSBwYWRhIG1vZGFsIHlhbmcgbWVyZWthIG1pbGlraS4gWWFuZyBhZGEgZGkgZGFsYW0KICAgICAgICBwaWtpcmFuIG1lcmVrYSBhZGFsYWggYmFnYWltYW5hIGNhcmFueWEgYWdhciBiaXNhIG1lcmFpaCBrZW1lbmFuZ2FuCiAgICAgICAgc2FhdCBiZXJtYWluLiA8YnIgLz48YnIgLz4KICAgICAgICBLZXRpa2EgaGFsIGluaSBzdWRhaCB0ZXJqYWRpLCBha2FuIHNhbmdhdCBiZXJ1bnR1bmcgamlrYSBwZW1haW4KICAgICAgICB0ZXJzZWJ1dCBzZWxhbHUgbWVyYWloIGtlbWVuYW5nYW4uIE5hbXVuLCBqaWthIGtla2FsYWhhbiBkaWFsYW1pLAogICAgICAgIGJpYXNhbnlhIHRpZGFrIHRlcmFzYSBtb2RhbCBiZXJtYWluIHN1ZGFoIHNlbWFraW4gbWVuaXBpcyBzYWF0IG1haW4gZGkKICAgICAgICBzaXR1cyBqdWRpIG9ubGluZS4gPGJyIC8+PGJyIC8+CiAgICAgICAgSGFsIHNlbWFjYW0gaW5pIGJpYXNhbnlhIGRpdGVtdWthbiBkYWxhbSBqdWRpCiAgICAgICAgPHN0cm9uZz5zbG90IG9ubGluZTwvc3Ryb25nPi4gRGFsYW0ganVkaSBzbG90IG9ubGluZSwga2VoYWRpcmFuCiAgICAgICAga29tYmluYXNpIGdhbWJhciB5YW5nIG1lbmRhdGFuZ2thbiBqYWNrcG90CiAgICAgICAgPHN0cm9uZz5zbG90IGRlcG9zaXQgcHVsc2E8L3N0cm9uZz4gZGFsYW0gYmViZXJhcGEgZ2FtZSBzbG90IG9ubGluZQogICAgICAgIGN1a3VwIG11ZGFoIGRpZGFwYXQgc2VoaW5nZ2Ega2VtZW5hbmdhbiBiZXJ1bnR1biBwdW4gYmlzYSBzYWphCiAgICAgICAgdGVyamFkaS4gPGJyIC8+PGJyIC8+CiAgICAgICAgVW50dWsgaXR1LCBzZWJlbHVtIGJlcm1haW4gZGFsYW0gc2VidWFoIGdlbQogICAgICAgIDxhCiAgICAgICAgICBocmVmPSJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9PbmxpbmVfZ2FtYmxpbmciCiAgICAgICAgICByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgID5qdWRpIG9ubGluZTwvYQogICAgICAgID4sIGFsYW5na2FoIGJhaWtueWEgamlrYSBBbmRhIHN1ZGFoIG1lbmV0YXBrYW4gdGVybGViaWggZGFodWx1IGJhdGFzYW4KICAgICAgICBtb2RhbCB5YW5nIGFrYW4gZGltYWlua2FuIHBhZGEgPHN0cm9uZz5zbG90IGRlcG9zaXQgcHVsc2E8L3N0cm9uZz4uCiAgICAgICAgSGFsIGluaSBwZW50aW5nIHVudHVrIG1lbmdhbnRpc2lwYXNpIGppa2EgQW5kYSBtZW5nYWxhbWkga2VrYWxhaGFuCiAgICAgICAgbmFudGlueWEuPGJyIC8+PGJyIC8+CiAgICAgICAgVGFodSBrYXBhbiB3YWt0dW55YSBoYXJ1cyBiZXJoZW50aSBiYWlrIGtldGlrYSBzZWRhbmcgbWVuYW5nIGF0YXVwdW4KICAgICAgICBrYWxhaCBhZGFsYWggc2FsYWggc2F0dSBjaXJpIEFuZGEgc3VkYWggbWVuZ3Vhc2FpIHBlcm1haW5hbiBqdWRpCiAgICAgICAgb25saW5lIHBhZGEgPHN0cm9uZz5zbG90IGRlcG9zaXQgcHVsc2E8L3N0cm9uZz4gS2FsYWggaXR1IGhhbCB5YW5nCiAgICAgICAgYmlhc2Ega2FyZW5hIEFuZGEgcGFzdGlueWEgbWVtYnV0dWhrYW4gcGVuZ2FsYW1hbiBkYWxhbSBiZXJtYWluCiAgICAgICAgc2ViZWx1bSBiaXNhIG1lbmRhcGF0a2FuIGtlbWVuYW5nYW4uPGJyIC8+CiAgICAgIDwvaDM+CiAgICA8L2Itcm93PgogIDwvZGl2Pgo8L0Jhc2VMYXlvdXQ+Cg=="},null]}