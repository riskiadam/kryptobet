{"remainingRequest":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\kikis\\Documents\\kryptobet\\src\\views\\Isobet\\Desktop\\Profile\\profile.vue?vue&type=template&id=0368da27&","dependencies":[{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\src\\views\\Isobet\\Desktop\\Profile\\profile.vue","mtime":1642470647575},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644485493295},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1644485502309},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644485493295},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\vue-loader\\lib\\index.js","mtime":1644485499914}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxCYXNlTGF5b3V0PgogIDxkaXYgY2xhc3M9InByb2ZpbGUiIHYtaWY9InJlbmRlciI+CiAgICA8Yi1yb3cKICAgICAgY2xhc3M9IlByb2ZpbGVEZXNrdG9wIgogICAgICBzdHlsZT0icGFkZGluZzowcHg7IG1hcmdpbjowcHg7IG1hcmdpbi10b3A6MzBweDsiCiAgICA+CiAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUtY29udGVudCIgc3R5bGU9InBhZGRpbmc6MHB4OyI+CiAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZS1zZWN0aW9uLWNvbnRhaW5lciIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6IzAwMDsiPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0icHJvZmlsZS1zZWN0aW9uLXRpdGxlIgogICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojMzIwMDMzOyBjb2xvcjp3aGl0ZTsgcGFkZGluZzoxNXB4OyBtYXJnaW46MHB4OyIKICAgICAgICAgID4KICAgICAgICAgICAgUFJPRklMRSBBQ0NPVU5UCiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUtc2VjdGlvbi1jb250ZW50Ij4KICAgICAgICAgICAgPGItY29udGFpbmVyIGZsdWlkPgogICAgICAgICAgICAgIDwhLS0gTmFtYSBMZW5na2FwLS0+CiAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJwcm9maWxlLWZvcm0tcm93Ij4KICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgICA+TmFtZTwvYi1jb2wKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWlucHV0Ij4KICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dCB2LW1vZGVsPSJwcm9maWxlLmFjY291bnROYW1lIj48L2ItZm9ybS1pbnB1dD4KICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgPCEtLSBOYW1hIFBsYXllciAtLT4KICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgICAgPGItY29sIGNvbCBjb2xzPSIxMiIgbWQ9IjYiIGNsYXNzPSJwcm9maWxlLWZvcm0tbGFiZWwiCiAgICAgICAgICAgICAgICAgID5Vc2VybmFtZTwvYi1jb2wKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWlucHV0Ij4KICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dCB2LW1vZGVsPSJwcm9maWxlLnVzZXJuYW1lIj48L2ItZm9ybS1pbnB1dD4KICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgPCEtLSBUYW5nZ2FsIExhaGlyIC0tPgogICAgICAgICAgICAgIDwhLS0gPGItcm93IGNsYXNzPSJwcm9maWxlLWZvcm0tcm93Ij4KICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iNiIgY2xhc3M9InByb2ZpbGUtZm9ybS1sYWJlbCIKICAgICAgICAgICAgICAgID5EYXRlIG9mIEJpcnRoPC9iLWNvbD4KICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWlucHV0Ij4KICAgICAgICAgICAgICAgIDxiLWZvcm0taW5wdXQ+PC9iLWZvcm0taW5wdXQ+CiAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICA8L2Itcm93Pi0tPgoKICAgICAgICAgICAgICA8IS0tIEplbmlzIEtlbGFtaW4gLS0+CiAgICAgICAgICAgICAgPCEtLSA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgPkdlbmRlcjwvYi1jb2w+CiAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iNiIgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCI+CiAgICAgICAgICAgICAgICA8Yi1mb3JtLWlucHV0PjwvYi1mb3JtLWlucHV0PgogICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgPC9iLXJvdz4gLS0+CgogICAgICAgICAgICAgIDwhLS0gVXNlciBFbWFpbCAtLT4KICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgICAgPGItY29sIGNvbCBjb2xzPSIxMiIgbWQ9IjYiIGNsYXNzPSJwcm9maWxlLWZvcm0tbGFiZWwiCiAgICAgICAgICAgICAgICAgID5FbWFpbDwvYi1jb2wKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWlucHV0Ij4KICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dCB2LW1vZGVsPSJwcm9maWxlLmVtYWlsIj48L2ItZm9ybS1pbnB1dD4KICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgPCEtLSBVc2VyIE1vYmlsZSAtLT4KICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgICAgPGItY29sIGNvbCBjb2xzPSIxMiIgbWQ9IjYiIGNsYXNzPSJwcm9maWxlLWZvcm0tbGFiZWwiCiAgICAgICAgICAgICAgICAgID5Nb2JpbGU8L2ItY29sCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iNiIgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCI+CiAgICAgICAgICAgICAgICAgIDxiLWZvcm0taW5wdXQgdi1tb2RlbD0icHJvZmlsZS5waG9uZSI+PC9iLWZvcm0taW5wdXQ+CiAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgIDwvYi1yb3c+CgogICAgICAgICAgICAgIDwhLS0gSnVtbGFoIENyZWRpdCAtLT4KICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgICAgPGItY29sIGNvbCBjb2xzPSIxMiIgbWQ9IjYiIGNsYXNzPSJwcm9maWxlLWZvcm0tbGFiZWwiCiAgICAgICAgICAgICAgICAgID5BdmFpbGFibGUgQmFsYW5jZTwvYi1jb2wKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWlucHV0Ij4KICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dAogICAgICAgICAgICAgICAgICAgIGZsdWlkCiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJtYWluV2FsbGV0LmJhbGFuY2UiCiAgICAgICAgICAgICAgICAgID48L2ItZm9ybS1pbnB1dD4KICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgPCEtLSBOYW1hIEJhbmsgLS0+CiAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJwcm9maWxlLWZvcm0tcm93Ij4KICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgICA+QmFuazwvYi1jb2wKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWlucHV0Ij4KICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dAogICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImN1cnJlbnRVc2VyLmJhbmsubmFtZSIKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIHNpemU9InNtIgogICAgICAgICAgICAgICAgICAgIGZsdWlkCiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgPjwvYi1mb3JtLWlucHV0PgogICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICA8L2Itcm93PgoKICAgICAgICAgICAgICA8IS0tIE5vcmVrLiBCYW5rIC0tPgogICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0icHJvZmlsZS1mb3JtLXJvdyI+CiAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iNiIgY2xhc3M9InByb2ZpbGUtZm9ybS1sYWJlbCIKICAgICAgICAgICAgICAgICAgPkJhbmsgQWNjb3VudCBOby48L2ItY29sCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iNiIgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCI+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNFOUVDRUYiPgogICAgICAgICAgICAgICAgICAgIHt7IGN1cnJlbnRVc2VyLmFjY291bnRObyB8IGJhY2tNYXNraW5nIH19CiAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgPCEtLSBBLk4uIEJhbmsgLS0+CiAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJwcm9maWxlLWZvcm0tcm93Ij4KICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgICA+QmFuayBBY2NvdW50IE5hbWU8L2ItY29sCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iNiIgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCI+CiAgICAgICAgICAgICAgICAgIDxiLWZvcm0taW5wdXQKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjdXJyZW50VXNlci5hY2NvdW50TmFtZSIKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIHNpemU9InNtIgogICAgICAgICAgICAgICAgICAgIGZsdWlkCiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgPjwvYi1mb3JtLWlucHV0PgogICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICA8L2Itcm93PgoKICAgICAgICAgICAgICA8IS0tIFBlbmFtYmFoYW4gQWt1biBCYW5rIC0tPgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIHYtZm9yPSJ4IGluIGFkZGl0aW9uYWxCYW5rQWNjIgogICAgICAgICAgICAgICAgOmtleT0ieC5pZHgiCiAgICAgICAgICAgICAgICBjbGFzcz0ic2VwYXJhdG9yLWJhbmstYWNjIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0icHJvZmlsZS1mb3JtLXJvdyI+CiAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgICAgID5CYW5rIHt7IHguaWR4ICsgMSB9fTwvYi1jb2wKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iNiIgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dAogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ieC5iYW5rIgogICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgIHNpemU9InNtIgogICAgICAgICAgICAgICAgICAgICAgZmx1aWQKICAgICAgICAgICAgICAgICAgICA+PC9iLWZvcm0taW5wdXQ+CiAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICA8L2Itcm93PgoKICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0icHJvZmlsZS1mb3JtLXJvdyI+CiAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI2IiBjbGFzcz0icHJvZmlsZS1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgICAgID5CYW5rIEFjY291bnQgTm8uIHt7IHguaWR4ICsgMSB9fTwvYi1jb2wKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iNiIgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dAogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ieC5hY2NvdW50Tm8iCiAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgc2l6ZT0ic20iCiAgICAgICAgICAgICAgICAgICAgICBmbHVpZAogICAgICAgICAgICAgICAgICAgID48L2ItZm9ybS1pbnB1dD4KICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgIDwvYi1yb3c+CgogICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJwcm9maWxlLWZvcm0tcm93Ij4KICAgICAgICAgICAgICAgICAgPGItY29sIGNvbCBjb2xzPSIxMiIgbWQ9IjYiIGNsYXNzPSJwcm9maWxlLWZvcm0tbGFiZWwiCiAgICAgICAgICAgICAgICAgICAgPkJhbmsgQWNjb3VudCBOYW1lIHt7IHguaWR4ICsgMSB9fTwvYi1jb2wKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iNiIgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dAogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ieC5hY2NvdW50TmFtZSIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICBzaXplPSJzbSIKICAgICAgICAgICAgICAgICAgICAgIGZsdWlkCiAgICAgICAgICAgICAgICAgICAgPjwvYi1mb3JtLWlucHV0PgogICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gY2xhc3M9InN1Ym1pdC1idXR0b24tMiIgQGNsaWNrPSJyZW1vdmVCYW5rQWNjKHgpIj4KICAgICAgICAgICAgICAgICAgICAgIFNhdmUKICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gY2xhc3M9InN1Ym1pdC1idXR0b24tMiIgQGNsaWNrPSJyZW1vdmVCYW5rQWNjKHgpIj4KICAgICAgICAgICAgICAgICAgICAgIFJlbW92ZQogICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICA8IS0tIFRvbWJvbCBQZW5hbWJhaGFuIEFrdW4gQmFuayAtLT4KICAgICAgICAgICAgICA8Yi1yb3cKICAgICAgICAgICAgICAgIGNsYXNzPSJwcm9maWxlLWZvcm0tcm93IgogICAgICAgICAgICAgICAgaGlkZGVuCiAgICAgICAgICAgICAgICB2LWlmPSJhZGRpdGlvbmFsQmFua0FjYy5sZW5ndGggPCAzIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICA8Yi1idXR0b24KICAgICAgICAgICAgICAgICAgICBmbHVpZAogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJzdWJtaXQtYnV0dG9uLTIiCiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJhZGROZXdCYWNrQWNjIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgQWRkIEJhbmsgQWNjb3VudAogICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPgogICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICA8L2ItY29udGFpbmVyPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgoKICAgICAgPGItY29sPgogICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUtY29udGVudCIgc3R5bGU9InBhZGRpbmc6MHB4OyBtYXJnaW46MHB4OyI+CiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzPSJwcm9maWxlLXNlY3Rpb24tY29udGFpbmVyIgogICAgICAgICAgICBzdHlsZT0icGFkZGluZzowcHg7IG1hcmdpbjowcHg7IgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3M9InByb2ZpbGUtc2VjdGlvbi10aXRsZSIKICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojMzIwMDMzOyBjb2xvcjp3aGl0ZTsgcGFkZGluZzoxNXB4OyBtYXJnaW46MHB4OyIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIENIQU5HRSBQQVNTV09SRAogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZS1zZWN0aW9uLWNvbnRlbnQiPgogICAgICAgICAgICAgIDxiLWNvbnRhaW5lciBmbHVpZD4KICAgICAgICAgICAgICAgIDxiLXJvdz4KICAgICAgICAgICAgICAgICAgPGItY29sIGNvbHM9IjEyIj4KICAgICAgICAgICAgICAgICAgICA8Yi1mb3JtIEBzdWJtaXQucHJldmVudD0iY2hhbmdlUGFzc3dvcmQiPgogICAgICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJwcm9maWxlLWZvcm0tcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29scz0iMTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9IjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tc2VsZj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwcm9maWxlLWZvcm0tbGFiZWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPk9sZCBwYXNzd29yZDwvYi1jb2wKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iOCIgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icGFzc3dvcmRQYXlsb2FkLm9sZFBhc3N3b3JkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPSJzbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsdWlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYi1mb3JtLWlucHV0PgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0icHJvZmlsZS1mb3JtLXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbAogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbAogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgICAgICAgICAgICAgIG1kPSI0IgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduLXNlbGY9ImNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHJvZmlsZS1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgICAgICAgICAgID5OZXcgUGFzc3dvcmQ8L2ItY29sCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbCBjb2xzPSIxMiIgbWQ9IjgiIGNsYXNzPSJwcm9maWxlLWZvcm0taW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWZvcm0taW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InBhc3N3b3JkUGF5bG9hZC5uZXdQYXNzd29yZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InBhc3N3b3JkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT0ic20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbHVpZAogICAgICAgICAgICAgICAgICAgICAgICAgID48L2ItZm9ybS1pbnB1dD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICAgICAgICAgICAgICBtZD0iNCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbi1zZWxmPSJjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InByb2ZpbGUtZm9ybS1sYWJlbCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+Q29uZmlybSBQYXNzd29yZDwvYi1jb2wKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICAgICAgICAgICAgICBtZD0iOCIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbi1zZWxmPSJjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWZvcm0taW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InBhc3N3b3JkUGF5bG9hZC5jb25maXJtUGFzcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InBhc3N3b3JkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT0ic20iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbHVpZAogICAgICAgICAgICAgICAgICAgICAgICAgID48L2ItZm9ybS1pbnB1dD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xzPSIxMiIKICAgICAgICAgICAgICAgICAgICAgICAgICBtZD0iNCIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHJvZmlsZS1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgICAgICAgICA+PC9iLWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sIGNvbCBjb2xzPSIxMiIgbWQ9IjQiIGNsYXNzPSJwcm9maWxlLWZvcm0taW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiBjbGFzcz0icmVzZXQtYnV0dG9uIiBAY2xpY2s9ImNsZWFyUGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+UmVzZXQ8L2ItYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgICA8Yi1jb2wgY29sIGNvbHM9IjEyIiBtZD0iNCIgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJzdWJtaXQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ic3VibWl0LWJ1dHRvbi0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I0ZGOTkzMyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID5TdWJtaXQ8L2ItYnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICA8L2ItZm9ybT4KICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KICAgICAgICAgICAgICAgIDwvYi1yb3c+CiAgICAgICAgICAgICAgPC9iLWNvbnRhaW5lcj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPSJwcm9maWxlLWNvbnRlbnQiPgogICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZS1zZWN0aW9uLWNvbnRhaW5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUtc2VjdGlvbi10aXRsZSI+Q0hBTkdFIFBJTjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlLXNlY3Rpb24tY29udGVudCI+CiAgICAgICAgICAgICAgPGItY29udGFpbmVyIGZsdWlkPgogICAgICAgICAgICAgICAgPGItcm93PgogICAgICAgICAgICAgICAgICA8Yi1jb2wgY29scz0iMTIiPgogICAgICAgICAgICAgICAgICAgIDxiLWZvcm0gQHN1Ym1pdC5wcmV2ZW50PSJjaGFuZ2VQaW4iPgogICAgICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJwcm9maWxlLWZvcm0tcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29scz0iMTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9IjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ24tc2VsZj0iY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwcm9maWxlLWZvcm0tbGFiZWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPlBhc3N3b3JkPC9iLWNvbAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI4IiBjbGFzcz0icHJvZmlsZS1mb3JtLWlucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1mb3JtLWlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJwaW5QYXlsb2FkLnBhc3N3b3JkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPSJzbSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsdWlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvYi1mb3JtLWlucHV0PgogICAgICAgICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0icHJvZmlsZS1mb3JtLXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbAogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbAogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgICAgICAgICAgICAgIG1kPSI0IgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduLXNlbGY9ImNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHJvZmlsZS1mb3JtLWxhYmVsIgogICAgICAgICAgICAgICAgICAgICAgICAgID5OZXcgUGluPC9iLWNvbAogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI4IiBjbGFzcz0icHJvZmlsZS1mb3JtLWlucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBrZXlwcmVzcz0ib25seU51bWJlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InBhc3N3b3JkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0icGluUGF5bG9hZC5uZXdQaW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoPSI0IgogICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJwcm9maWxlLWZvcm0tcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGItY29sCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29scz0iMTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9IjQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InByb2ZpbGUtZm9ybS1sYWJlbCIKICAgICAgICAgICAgICAgICAgICAgICAgPjwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWNvbCBjb2wgY29scz0iMTIiIG1kPSI4IiBjbGFzcz0icHJvZmlsZS1mb3JtLWlucHV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0ic3VibWl0LWJ1dHRvbi0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPlN1Ym1pdDwvYi1idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8L2Itcm93PgogICAgICAgICAgICAgICAgICAgIDwvYi1mb3JtPgogICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICA8L2ItY29udGFpbmVyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PiAtLT4KCiAgICAgICAgPGRpdgogICAgICAgICAgY2xhc3M9InByb2ZpbGUtY29udGVudCIKICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOjBweDsgbWFyZ2luOjBweDsgbWFyZ2luLXRvcDoxNXB4OyBtYXJnaW4tYm90dG9tOjE1cHg7IgogICAgICAgID4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9InByb2ZpbGUtc2VjdGlvbi1jb250YWluZXIiCiAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOjBweDsgbWFyZ2luOjBweDsgIgogICAgICAgICAgPgogICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgY2xhc3M9InByb2ZpbGUtc2VjdGlvbi10aXRsZSIKICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojMzIwMDMzOyBjb2xvcjp3aGl0ZTtwYWRkaW5nOjE1cHg7IG1hcmdpbjowcHg7IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgUkVGRVJSQUwKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUtc2VjdGlvbi1jb250ZW50Ij4KICAgICAgICAgICAgICA8Yi1jb250YWluZXIgZmx1aWQ+CiAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICBjb2wKICAgICAgICAgICAgICAgICAgICBjb2xzPSI0IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwcm9maWxlLWZvcm0tbGFiZWwiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6MHB4OyBtYXJnaW46MHB4OyIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIFJlZmVycmFsIENvZGUKICAgICAgICAgICAgICAgICAgPC9iLWNvbD4KCiAgICAgICAgICAgICAgICAgIDxiLWNvbAogICAgICAgICAgICAgICAgICAgIGNvbAogICAgICAgICAgICAgICAgICAgIGNvbHM9IjgiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InByb2ZpbGUtZm9ybS1pbnB1dCIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0icGFkZGluZzowcHg7IG1hcmdpbjowcHg7IgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPGItZm9ybS1pbnB1dAogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY3VycmVudFVzZXIucmVmZXJyYWxDb2RlIgogICAgICAgICAgICAgICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgICAgICAgICAgICAgIHNpemU9InNtIgogICAgICAgICAgICAgICAgICAgICAgZmx1aWQKICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDwvYi1mb3JtLWlucHV0PgogICAgICAgICAgICAgICAgICA8L2ItY29sPgogICAgICAgICAgICAgICAgPC9iLXJvdz4KCiAgICAgICAgICAgICAgICA8Yi1yb3cgY2xhc3M9InByb2ZpbGUtZm9ybS1yb3ciPgogICAgICAgICAgICAgICAgICA8Yi1jb2wKICAgICAgICAgICAgICAgICAgICBjb2wKICAgICAgICAgICAgICAgICAgICBjb2xzPSI0IgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwcm9maWxlLWZvcm0taW5wdXQiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9InBhZGRpbmc6MHB4OyBtYXJnaW46MHB4OyIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICA8L2ItY29sPgoKICAgICAgICAgICAgICAgICAgPGItY29sCiAgICAgICAgICAgICAgICAgICAgY29sCiAgICAgICAgICAgICAgICAgICAgY29scz0iOCIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHJvZmlsZS1mb3JtLWlucHV0IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOjBweDsgbWFyZ2luOjBweDsgd2lkdGg6MTAwJSIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InN1Ym1pdC1idXR0b24tMiIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iY29weUxpbmsiCiAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6MTAwJTsgYmFja2dyb3VuZC1jb2xvcjojRkY5OTMzOyIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICBDb3B5IExpbmsgUmVmZXJyYWwgQ29kZQogICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+CiAgICAgICAgICAgICAgICAgIDwvYi1jb2w+CiAgICAgICAgICAgICAgICA8L2Itcm93PgoKICAgICAgICAgICAgICAgIDxiLXJvdyBjbGFzcz0icHJvZmlsZS1mb3JtLXJvdyI+CiAgICAgICAgICAgICAgICAgIDxiLWNvbAogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJwYWRkaW5nOjBweDsgbWFyZ2luOjBweDsiCiAgICAgICAgICAgICAgICAgICAgY29sCiAgICAgICAgICAgICAgICAgICAgY29scz0iMTIiCiAgICAgICAgICAgICAgICAgICAgbWQ9IjEyIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwcm9maWxlLWZvcm0tbGFiZWwgIG1iLTIiCiAgICAgICAgICAgICAgICAgICAgPlJlZmVycmFsIExpc3Q8L2ItY29sCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDwvYi1yb3c+CgogICAgICAgICAgICAgICAgPGItcm93IGNsYXNzPSJwcm9maWxlLWZvcm0tcm93Ij4KICAgICAgICAgICAgICAgICAgPGItdGFibGUKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2VudGVyIHRleHQtY2VudGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6IzAwMDsgY29sb3I6d2hpdGU7IgogICAgICAgICAgICAgICAgICAgIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgY2VudGVyCiAgICAgICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgICAgIGhvdmVyCiAgICAgICAgICAgICAgICAgICAgc3RyaXBlZAogICAgICAgICAgICAgICAgICAgIHNob3ctZW1wdHkKICAgICAgICAgICAgICAgICAgICA6aXRlbXM9ImN1cnJlbnRVc2VyLnJlZmVycmFsTGlzdCIKICAgICAgICAgICAgICAgICAgICA6ZmllbGRzPSJmaWVsZHMiCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmNlbGwoam9pbkRhdGUpPSJkYXRhIj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7IGRhdGEuaXRlbS5qb2luRGF0ZSB8IGxvY2FsRGF0ZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmNlbGwobGFzdExvZ2luRGF0ZSk9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgZGF0YS5pdGVtLmxhc3RMb2dpbkRhdGUgfCBsb2NhbERhdGUgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KCiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpjZWxsKHN0YXR1cyk9ImRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1pbmZvIj4KICAgICAgICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLml0ZW0uaXNBY3RpdmUgPyAiQWN0aXZlIiA6ICJXYWl0aW5nIGZvciBBcHByb3ZhbCIKICAgICAgICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1kYW5nZXIiPgogICAgICAgICAgICAgICAgICAgICAgICB7eyBkYXRhLml0ZW0uaXNCbGFja2xpc3RlZCA/ICJBY2NvdW50IExvY2tlZCIgOiAiIiB9fQogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgPC9iLXRhYmxlPgogICAgICAgICAgICAgICAgPC9iLXJvdz4KICAgICAgICAgICAgICA8L2ItY29udGFpbmVyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2ItY29sPgogICAgPC9iLXJvdz4KICA8L2Rpdj4KPC9CYXNlTGF5b3V0Pgo="},null]}