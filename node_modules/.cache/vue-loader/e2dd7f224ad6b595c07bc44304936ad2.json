{"remainingRequest":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\kikis\\Documents\\kryptobet\\src\\views\\Isobet\\Mobile\\Home\\Home.vue?vue&type=template&id=1b4f860a&","dependencies":[{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\src\\views\\Isobet\\Mobile\\Home\\Home.vue","mtime":1644570902817},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644485493295},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1644485502309},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1644485493295},{"path":"C:\\Users\\kikis\\Documents\\kryptobet\\node_modules\\vue-loader\\lib\\index.js","mtime":1644485499914}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}